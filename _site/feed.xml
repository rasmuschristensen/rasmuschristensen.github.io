<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rasmus Tolstrup Christensen</title>
    <description>Long Form Jekyll theme built with SASS / COMPASS / SUSY</description>
    <link>http://rasmustc.com/</link>
    <atom:link href="http://rasmustc.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 04 Jan 2016 23:21:14 +0100</pubDate>
    <lastBuildDate>Mon, 04 Jan 2016 23:21:14 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      
      <item>
        <title>Explicit Facebook Auth with Xamarin Forms and WebAPI CustomGrant part 1</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;S&lt;/span&gt;ocial authention with providers is always a standard in many mobile applications today. A lot of authentication is provided either 
directly from the mobile app itself or by an API. In this blog post I&#39;ll show how to do explicit authentication with Facebook in an app built with Xamarin and ASPNET WebAPI to enable token based authentication.
Part 1 will focus on the app and part 2 will focus on the API.
&lt;/p&gt;

&lt;h3&gt;A little background&lt;/h3&gt;

&lt;p&gt;Some applications have only the client itself and no backend. I often build apps where the client is supported by a backend API. My preferred API solution is based on ASPNET WebAPI.
When it comes to authentitation with social providers, you&amp;#39;ll often find a lot about how the WebAPI can be setup to support clients like Facebook, Twitter etc. Often by redirecting the client
to some login page. While this is often fine and also for web applications, there are other solutions and also very simple solutions.
I&amp;#39;ve worked with both ThinkTecture IdentityServer and WebAPI, but inspired by a lot of reading on &lt;a href=&quot;http://bitoftech.net&quot;&gt;BitOfTech&lt;/a&gt; I learned a lot more
of how to use WebAPI. With a background developing Single Page Web Applications using tokens, I got a lot of inspiration from this &lt;a href=&quot;http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/&quot;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When it comes to mobile applications, token based authentiation is also a great fit.&lt;/p&gt;

&lt;h3&gt;The mission&lt;/h3&gt;

&lt;p&gt;We&amp;#39;ll build a mobile Xamarin app, where the app requests Facebook to get an facebook access token &lt;strong&gt;(1)&lt;/strong&gt;. Afterwards we&amp;#39;ll verify &lt;strong&gt;(2)&lt;/strong&gt; and exchange this token with an access token (bearer token) to our system &lt;strong&gt;(3)&lt;/strong&gt;.
&lt;img src=&quot;/assets/img/app-fb-api.png&quot; alt=&quot;setup&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Register the app with facebook&lt;/h3&gt;

&lt;p&gt;First we need an app where we can authenticate with Facebook. The app will request Facebook for a loginpage provided by Facebook.
 This requires the app to be registered inside the &lt;a href=&quot;https://developers.facebook.com/&quot;&gt;Facebook Developer Portal&lt;/a&gt;. We just need to register it as a simple 
 webapp with a OAuth redirect URIs to be used when authentication succeeds. When your app is registered, you&amp;#39;ll end up with a &lt;strong&gt;ClientId&lt;/strong&gt;,&lt;strong&gt;ClientSecret&lt;/strong&gt; and a OAuth redirect URIs. The latter needs to be a valid
 endpoint to the API.&lt;/p&gt;

&lt;h3&gt;Build the app&lt;/h3&gt;

&lt;p&gt;The app will be created using Xamarin Forms. During this post we&amp;#39;ll only focus on the authentication, making a simple app that will redirect to authentication as soon as it starts.
Because we&amp;#39;re using Xamarin Forms we&amp;#39;ll create a &lt;strong&gt;CustomRenderer&lt;/strong&gt; for each platform. &lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;S&lt;/span&gt;ocial authention with providers is always a standard in many mobile applications today. A lot of authentication is provided either 
directly from the mobile app itself or by an API. In this blog post I&#39;ll show how to do explicit authentication with Facebook in an app built with Xamarin and ASPNET WebAPI to enable token based authentication.
Part 1 will focus on the app and part 2 will focus on the API.
&lt;/p&gt;
</description>
        
        <pubDate>Mon, 04 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Custom-Facebook-Authentication-with-webapi/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Custom-Facebook-Authentication-with-webapi/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Consume an IISExpress hosted WebAPI from OSX</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;D&lt;/span&gt;eveloping a mobile application with Xamarin on OSX consuming a WebAPI hosted on windows, can be a bit complicated if you want to run everything local and keep things as simple
as possible. The goal of this post is a step by step to consume an IISExpress hosted WebAPI running in a VMWare Fusion virtual machine with Windows 10 from OSX. Most of the steps should be similar if you are running
 Parallels instead of VMWare Fusion. 
&lt;/p&gt;

&lt;p&gt;When running a basic WebAPI locally, the default setup in Visual Studio is to use IIS Express, you can use Local IIS but my goal is to use IIS Express to keep things as simple as possible.&lt;/p&gt;

&lt;h2&gt;Creating the API in Windows&lt;/h2&gt;

&lt;p&gt;Creating the WebAPI is out of scope for this post, but basically follows the description &lt;a href=&quot;http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api&quot;&gt;here&lt;/a&gt;. 
Whether you want to use OWIN is not important, but I would recommend it. Ensure you have a simple controller &lt;strong&gt;ValuesController&lt;/strong&gt; with no authentication applied and a single action to consume a value.
For the purpose of this post we just need the action to return a simple value. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValuesController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;    [HttpGet]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Press F5 to ensure the API can run and try to consume the value using POSTMAN chromeextension e.g.
We are still on the windows host and should get the following result based on the request.
&lt;img src=&quot;/assets/img/consume_api.png&quot; alt=&quot;consumeapi&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Bridge mode network&lt;/h2&gt;

&lt;p&gt;The first step to allow access is to ensure the virtual machine is running with network in bridge mode. For VMWare Fusion I&amp;#39;ve written about it here
&lt;a href=&quot;http://rasmustc.com/blog/ATS-and-local-dev/&quot;&gt;ATS and local dev&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Expose the URL of the API&lt;/h2&gt;

&lt;p&gt;To allow an incoming request to the host to be directed to IISExpress, execute the following command &lt;strong&gt;ipconfig&lt;/strong&gt; from powershell running as administrator to get your current ip
&lt;img src=&quot;/assets/img/getipv4.png&quot; alt=&quot;get ip&quot;&gt;
With the IP in hand, execute the following command&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;netsh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlacl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1586&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;everyone&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A small note to executing the command specified above. The &lt;strong&gt;user&lt;/strong&gt; part must be localized according to your current windows settings or else you&amp;#39;ll get an error. You could also use your computername instead of ip.&lt;/p&gt;

&lt;h2&gt;Add a binding to IISExpress&lt;/h2&gt;

&lt;p&gt;To ensure our API is resolved when we make a request and the &lt;em&gt;API is running&lt;/em&gt;, we need to add an additional binding to the API projects applicationhost.config file. This file is located at:
&lt;strong&gt;PathToYourProject\.vs\config\applicationhost.config&lt;/strong&gt;. Edit the file and locate the &lt;strong&gt;&amp;lt;Bindings&amp;gt;&lt;/strong&gt; section under your projectname. My config looks like the configuration below where I&amp;#39;ve added both a specific binding to my IP on port 1586
and a binding to the computername &lt;strong&gt;windows&lt;/strong&gt; on port 8080. Remember to specify different port numbers or else the API will fail during startup.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;site&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ExposeAPI&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;applicationPool=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Clr4IntegratedAppPool&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;virtualDirectory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;physicalPath=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C:\dev\exposeapi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bindings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bindingInformation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*:1585:localhost&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bindingInformation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*:1586:192.168.1.234&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bindingInformation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*:8080:windows&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bindings&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/site&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Firewall private access rule&lt;/h2&gt;

&lt;p&gt;The last thing to configure is the firewall. Be sure to only configure a rule for your private network. You can either use the graphical firewall client on windows and specify the path to IISExpress.
Or use this command from Powershell. Note the portnumber at the end os the command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;netsh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;advfirewall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firewall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;IISExpressWeb&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;8080&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Making a request from OSX&lt;/h2&gt;

&lt;p&gt;Finally it&amp;#39;s time to test the API from OSX. As with windows I&amp;#39;m using POSTMAN to test the API. Testing the command this way would result in the same as consuming the API from a mobile client using httpclient
&lt;img src=&quot;/assets/img/osx2win.png&quot; alt=&quot;osx2win&quot;&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;D&lt;/span&gt;eveloping a mobile application with Xamarin on OSX consuming a WebAPI hosted on windows, can be a bit complicated if you want to run everything local and keep things as simple
as possible. The goal of this post is a step by step to consume an IISExpress hosted WebAPI running in a VMWare Fusion virtual machine with Windows 10 from OSX. Most of the steps should be similar if you are running
 Parallels instead of VMWare Fusion. 
&lt;/p&gt;
</description>
        
        <pubDate>Sun, 03 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Consume-IISExpress-WebAPI-from-OSX.1/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Consume-IISExpress-WebAPI-from-OSX.1/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Consume an IISExpress hosted WebAPI from OSX</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;D&lt;/span&gt;eveloping a mobile application with Xamarin on OSX consuming a WebAPI hosted on windows, can be a bit complicated if you want to run everything local and keep things as simple
as possible. The goal of this post is a step by step to consume an IISExpress hosted WebAPI running in a VMWare Fusion virtual machine with Windows 10 from OSX. Most of the steps should be similar if you are running
 Parallels instead of VMWare Fusion. 
&lt;/p&gt;

&lt;p&gt;When running a basic WebAPI locally, the default setup in Visual Studio is to use IIS Express, you can use Local IIS but my goal is to use IIS Express to keep things as simple as possible.&lt;/p&gt;

&lt;h2&gt;Creating the API in Windows&lt;/h2&gt;

&lt;p&gt;Creating the WebAPI is out of scope for this post, but basically follows the description &lt;a href=&quot;http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api&quot;&gt;here&lt;/a&gt;. 
Whether you want to use OWIN is not important, but I would recommend it. Ensure you have a simple controller &lt;strong&gt;ValuesController&lt;/strong&gt; with no authentication applied and a single action to consume a value.
For the purpose of this post we just need the action to return a simple value. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValuesController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;    [HttpGet]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Press F5 to ensure the API can run and try to consume the value using POSTMAN chromeextension e.g.
We are still on the windows host and should get the following result based on the request.
&lt;img src=&quot;/assets/img/consume_api.png&quot; alt=&quot;consumeapi&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Bridge mode network&lt;/h2&gt;

&lt;p&gt;The first step to allow access is to ensure the virtual machine is running with network in bridge mode. For VMWare Fusion I&amp;#39;ve written about it here
&lt;a href=&quot;http://rasmustc.com/blog/ATS-and-local-dev/&quot;&gt;ATS and local dev&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Expose the URL of the API&lt;/h2&gt;

&lt;p&gt;To allow an incoming request to the host to be directed to IISExpress, execute the following command &lt;strong&gt;ipconfig&lt;/strong&gt; from powershell running as administrator to get your current ip
&lt;img src=&quot;/assets/img/getipv4.png&quot; alt=&quot;get ip&quot;&gt;
With the IP in hand, execute the following command&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;netsh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlacl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1586&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;everyone&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A small note to executing the command specified above. The &lt;strong&gt;user&lt;/strong&gt; part must be localized according to your current windows settings or else you&amp;#39;ll get an error. You could also use your computername instead of ip.&lt;/p&gt;

&lt;h2&gt;Add a binding to IISExpress&lt;/h2&gt;

&lt;p&gt;To ensure our API is resolved when we make a request and the &lt;em&gt;API is running&lt;/em&gt;, we need to add an additional binding to the API projects applicationhost.config file. This file is located at:
&lt;strong&gt;PathToYourProject\.vs\config\applicationhost.config&lt;/strong&gt;. Edit the file and locate the &lt;strong&gt;&amp;lt;Bindings&amp;gt;&lt;/strong&gt; section under your projectname. My config looks like the configuration below where I&amp;#39;ve added both a specific binding to my IP on port 1586
and a binding to the computername &lt;strong&gt;windows&lt;/strong&gt; on port 8080. Remember to specify different port numbers or else the API will fail during startup.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;site&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ExposeAPI&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;applicationPool=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Clr4IntegratedAppPool&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;virtualDirectory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;physicalPath=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C:\dev\exposeapi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bindings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bindingInformation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*:1585:localhost&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bindingInformation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*:1586:192.168.1.234&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bindingInformation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*:8080:windows&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bindings&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/site&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Firewall private access rule&lt;/h2&gt;

&lt;p&gt;The last thing to configure is the firewall. Be sure to only configure a rule for your private network. You can either use the graphical firewall client on windows and specify the path to IISExpress.
Or use this command from Powershell. Note the portnumber at the end os the command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;netsh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;advfirewall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firewall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;IISExpressWeb&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;8080&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Making a request from OSX&lt;/h2&gt;

&lt;p&gt;Finally it&amp;#39;s time to test the API from OSX. As with windows I&amp;#39;m using POSTMAN to test the API. Testing the command this way would result in the same as consuming the API from a mobile client using httpclient
&lt;img src=&quot;/assets/img/osx2win.png&quot; alt=&quot;osx2win&quot;&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;D&lt;/span&gt;eveloping a mobile application with Xamarin on OSX consuming a WebAPI hosted on windows, can be a bit complicated if you want to run everything local and keep things as simple
as possible. The goal of this post is a step by step to consume an IISExpress hosted WebAPI running in a VMWare Fusion virtual machine with Windows 10 from OSX. Most of the steps should be similar if you are running
 Parallels instead of VMWare Fusion. 
&lt;/p&gt;
</description>
        
        <pubDate>Sun, 03 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Consume-IISExpress-WebAPI-from-OSX/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Consume-IISExpress-WebAPI-from-OSX/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>ATS and local development with Xamarin</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;A&lt;/span&gt;fter working with Xamarin for a while, one of the things I spent a lot of time on, was how to cosume an API running on Windows and hosted in VmWare Fusion from
a mobile Xamarin client running in either simulator or on a device.
&lt;/p&gt;

&lt;p&gt;As a .NET developer, my primary development IDE has been Visual Studio for many years. When I started doing Xamarin development, I went with 
Xamarin Studio, primarily because of the licensesing cost, but also to challenge myself with OSX and Xamarin Studio.
Based on this setup I&amp;#39;m hosting windows in a virtual machine using Vmware Fusion, with Visual Studio. And most of the time this will be where my mobile backend will be running during development.&lt;/p&gt;

&lt;h2&gt;Consuming a windows hosted API from OSX&lt;/h2&gt;

&lt;p&gt;The basic key to consume a window hosted API from OSX is the network setup. With VmWare Fusion, It&amp;#39;s pretty easy, using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bridging_(networking)&quot;&gt; network bridge&lt;/a&gt;.
From VmWare select &lt;strong&gt;Virtual Machine&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Network Adapter&lt;/strong&gt;
&lt;img src=&quot;/assets/img/bridgenetwork.png&quot; alt=&quot;Bridge network&quot;&gt; 
Inside this menu select &lt;strong&gt;Bridged Networking&lt;/strong&gt; and the &lt;strong&gt;Wi-fi&lt;/strong&gt; option. With this enabled it&amp;#39;s now possible to consume a VmWare Fusion hosted Windows WebAPI from Xamarin running the client   on OSX.&lt;/p&gt;

&lt;h2&gt;Http for local dev...the ATS issue on IOS&lt;/h2&gt;

&lt;p&gt;While it&amp;#39;s pretty easy to make the network bridge between OSX and Windows, the next bump on the road during development is &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&quot;&gt;Application Transport Security&lt;/a&gt;, (ATS - NSAppTransportSecurity).
Since IOS 9.0, Apple by default requre all communication to be secure, meaning https. As all projects starts small, this would be a bit of pain, and luckily there is an option to avoid this while developing on your local machine.&lt;/p&gt;

&lt;p&gt;If you run a vanilla Xamarin Forms project and try to consume a Windows API as described above, you&amp;#39;ll get this message,
but only if you taget IOS 9.0 or above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/iosATS.png&quot; alt=&quot;IOS ATS&quot;&gt; &lt;/p&gt;

&lt;h2&gt;Optional ATS using info.plist&lt;/h2&gt;

&lt;p&gt;To workaround this issue during local development (in production you should always use secure communication) you can add a new entry to the info.plist
in the Xmarin.ios project in your solution.
Locate the file and select the &lt;strong&gt;source&lt;/strong&gt; tab in the bottom of the file. Add a new entry to the file, either directly in Xamarin Studio, or in another text editor, this is just a plain xml file.
Add the entry &lt;strong&gt;NSAppTransportSecurity&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAppTransportSecurity&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAllowsArbitraryLoads&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Afterwards your infp.plist will should look like this
&lt;img src=&quot;/assets/img/infoplistchange.png&quot; alt=&quot;info plist change&quot;&gt; &lt;/p&gt;

&lt;p&gt;This will enable you to switch ATS on/off. Now turn it off and run the same code as before. This time you&amp;#39;ll be able to consume the API without being blocked by 
the lack of insecure communication.&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;A&lt;/span&gt;fter working with Xamarin for a while, one of the things I spent a lot of time on, was how to cosume an API running on Windows and hosted in VmWare Fusion from
a mobile Xamarin client running in either simulator or on a device.
&lt;/p&gt;
</description>
        
        <pubDate>Sun, 06 Dec 2015 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/ATS-and-local-dev/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/ATS-and-local-dev/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Compile XAML with Xamarin</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;O&lt;/span&gt;ne of the new features in Xamarin 4 and Xamarin Forms 2.0 is the ability to compile Xaml views.
 This feature should reduce view load time, the compiled app size, the catch might be an increase in compilation time, so let&#39;s see how
 this works.
&lt;/p&gt;

&lt;h2&gt;Xaml runtime error&lt;/h2&gt;

&lt;p&gt;First we created a basic Xamarin cross platform project based on Xamarin Forms. Ensure to update the Xamarin.Forms nuget packages to version 2.x.
Add a Xaml view to the project with a simple Button control and two properties Id and Text (...Yes the Id is not valid, let&amp;#39;s verify it.)
&lt;img src=&quot;/assets/img/InvalidXaml.png&quot; alt=&quot;xamarin invalid attr&quot;&gt;
Before Xamarin Forms 2.0 this would compile just fine, and if we didn&amp;#39;t do anything to the current project in Xamarin 2.0, compilation will also complete without any errors.
If we start the app either in the simulator or on a device, we would get a runtime error.
&lt;img src=&quot;/assets/img/xamlruntimeerror.png&quot; alt=&quot;xamarin runtime error&quot;&gt;&lt;br&gt;
As expected the &amp;quot;Id&amp;quot; property is invalid. 
As this is a very simple example, this could however be something deep inside our app and not that easy to locate.&lt;/p&gt;

&lt;h2&gt;Enabling Xaml Compilation&lt;/h2&gt;

&lt;p&gt;The new feature to enable the XamlC, Xaml Compiler - can be enabled at either assembly level or class level or in a mix of both. It&amp;#39;s located in the namespace
&lt;strong&gt;Xamarin.Forms.Xaml&lt;/strong&gt;. 
Locate the App class and above the namespace definition, add the following codesnippet.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms.Xaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[assembly: XamlCompilation (XamlCompilationOptions.Compile)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Build the project again and now the code won&amp;#39;t compile, with the following error, but luckily this time, we caught it during compilation.
&lt;img src=&quot;/assets/img/compileerror.png&quot; alt=&quot;xamarin compile error&quot;&gt;
It&amp;#39;s also possible to add Xaml compilation to a specific view, simply by added the same attribute as before without &lt;strong&gt;assembly:&lt;/strong&gt; to at the class level of a view.
The result is the same as before, except this time Xaml compilation is only enabled for a specific view.
&lt;img src=&quot;/assets/img/xamlcompilationclass.png&quot; alt=&quot;xamarin compile error&quot;&gt;&lt;/p&gt;

&lt;p&gt;Finally it&amp;#39;s possible to either add and mix multiple class level Xaml compilations or if you enabled it at assembly level, you can exclude it for specific viewsby selecting
&lt;strong&gt;.Skip&lt;/strong&gt; instead of &lt;strong&gt;.Compile&lt;/strong&gt; at class level
 &lt;img src=&quot;/assets/img/xamlcompileskip.png&quot; alt=&quot;xamarin compile skip&quot;&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;O&lt;/span&gt;ne of the new features in Xamarin 4 and Xamarin Forms 2.0 is the ability to compile Xaml views.
 This feature should reduce view load time, the compiled app size, the catch might be an increase in compilation time, so let&#39;s see how
 this works.
&lt;/p&gt;
</description>
        
        <pubDate>Wed, 25 Nov 2015 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/compiled-xaml-views/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/compiled-xaml-views/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Namespaces in Xamarin Studio</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt;f you like me have a background using Visual Studio, one of the first things you&#39;ll notice after a little
coding in Xamarin Studio is the default namespace handling. In Visual Studio namespaces per default follows the folder structure hierarchical.
In Xamarin Studio is&#39;s just the opposite, a flat namespace stucture.
&lt;/p&gt;

&lt;p&gt;To get the same behaviour in Xamarin Studio as in Visual Studio, goto 
&lt;strong&gt;Preferences -&amp;gt; Source Code -&amp;gt; .NET Naming Policies&lt;/strong&gt;. and select &lt;strong&gt;Hierarchical&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/xamarinnamespaces.png&quot; alt=&quot;xamarin studio&quot;&gt; &lt;/p&gt;

&lt;p&gt;Please note this is best done on a new project. If not, you have to manually ensure all namespaces are set correctly.&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt;f you like me have a background using Visual Studio, one of the first things you&#39;ll notice after a little
coding in Xamarin Studio is the default namespace handling. In Visual Studio namespaces per default follows the folder structure hierarchical.
In Xamarin Studio is&#39;s just the opposite, a flat namespace stucture.
&lt;/p&gt;
</description>
        
        <pubDate>Tue, 24 Nov 2015 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/namespaces-in-xamarin-studio/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/namespaces-in-xamarin-studio/</guid>
        
        
      </item>
      
    
  </channel>
</rss>
