<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rasmus Tolstrup Christensen</title>
    <description>Long Form Jekyll theme built with SASS / COMPASS / SUSY</description>
    <link>http://rasmustc.com/</link>
    <atom:link href="http://rasmustc.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 26 Feb 2016 00:14:42 +0100</pubDate>
    <lastBuildDate>Fri, 26 Feb 2016 00:14:42 +0100</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      
      <item>
        <title>CI With VSTS And Bitbucket</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;H&lt;/span&gt;ow to make Continuous Integration with Bitbucket and VSTS, when Bitbucket is not a default service inside VSTS.
&lt;/p&gt;

&lt;h3&gt;The mission&lt;/h3&gt;

&lt;p&gt;In my previous blog &lt;a href=&quot;http://rasmustc.com/blog/Continuous-Integration-With-VSTS-And-Xamarin/&quot;&gt;post&lt;/a&gt; I described how to make a basic CI setup with VSTS using a repository hosted in VSTS.
Bitbucket is a very popular source code repository, unfortunately not a default choice in VSTS, like GitHub etc. In this post I&amp;#39;ll show the steps required
to make Bitbucket work as repository. This post will use some of the concepts described in my previous blog post.
The build will also run on a local build agent, VSO agent.&lt;/p&gt;

&lt;h3&gt;Making a repository&lt;/h3&gt;

&lt;p&gt;The first step is to make a repository at Bitbucket and make an initial commit. When the commit is made, copy the &lt;strong&gt;https&lt;/strong&gt; url of the repository.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//rasmuschristensen@bitbucket.org/rasmuschristensen/nearby.git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;VSTS Bitbucket Service endpoint&lt;/h3&gt;

&lt;p&gt;Because there is no default hook in VSTS to support Bitbucket, we need to create it as &lt;strong&gt;external git&lt;/strong&gt;.
Navigate to the collection settings for your project, by selecting the &amp;#39;gears&amp;#39; icon in the upper right corner of your project.
Select the &lt;strong&gt;Services&lt;/strong&gt; tab and click the &lt;strong&gt;New Service Endpoint&lt;/strong&gt;. From the menu select &lt;strong&gt;External Git&lt;/strong&gt;.
A dialog is displayed. Add a &lt;strong&gt;Connection name&lt;/strong&gt;, this is just your identification of the service endpoint.
The &lt;strong&gt;Server Url&lt;/strong&gt; is the fully qualified url we copied from the Bitbucket homepage. As we used &lt;strong&gt;https&lt;/strong&gt; username and password is the ones you use 
for regular https usage of the repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bitbucketserviceendpoint.png&quot; alt=&quot;serviceendpoint&quot;&gt;&lt;/p&gt;

&lt;h3&gt;VSTS permissions&lt;/h3&gt;

&lt;p&gt;VSTS build needs some permissions to use this external git, during a build process.
Navigate to the &lt;strong&gt;Default collection&lt;/strong&gt; a level above your corrent project and select the &lt;strong&gt;Security&lt;/strong&gt; tab. Locate &lt;strong&gt;Project Collection Build Administrators&lt;/strong&gt; and ensure &lt;strong&gt;Edit Collection-level information&lt;/strong&gt; is set to &lt;strong&gt;Allow&lt;/strong&gt;.
If not you&amp;#39;ll get an error during the build process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildpermissions.png&quot; alt=&quot;buildpermissions&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Adding a build definition&lt;/h3&gt;

&lt;p&gt;Navigate to your VSTS project again and select the &lt;strong&gt;Build&lt;/strong&gt; tab. Click the &lt;strong&gt;+&lt;/strong&gt; to create a new build definition.
I&amp;#39;m using the Xamarin.iOS. From the template select &lt;strong&gt;Remote git repository&lt;/strong&gt; (note the name difference :)).
Once created, you can now edit the details. &lt;/p&gt;

&lt;p&gt;From the &lt;strong&gt;Build&lt;/strong&gt; menu item of the build definition, add the relative path to the solution, sln file.
&lt;em&gt;(hint: If you get this one wrong, you can use the build console output, to see the fully qualified path, and easy correct it afterwards)&lt;/em&gt;.
Next you need to select the &lt;strong&gt;Repository&lt;/strong&gt; menu item. The &lt;strong&gt;Repository type&lt;/strong&gt; should already be set to &lt;strong&gt;external git&lt;/strong&gt; (not remote :)). Refresh the &lt;strong&gt;Connection&lt;/strong&gt; and select
the Bitbucket service endpoint we created earlier, leave the &lt;strong&gt;Repository name&lt;/strong&gt; blank. The service endpoint is already fully qualified. Save the build definition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bitbucketgit.png&quot; alt=&quot;bitbucketgit&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Update VSO-agent&lt;/h3&gt;

&lt;p&gt;Ensure to update your VSO build agent. I used a previous version and had issues with username and password for the external git, not being passed along to the 
build agent, causing the build to fail (see this &lt;a href=&quot;https://github.com/Microsoft/vso-agent/issues/183&quot;&gt;issue&lt;/a&gt;). Updating an existing agent is the same as installing a new one. Navigate to the agents directory where the package.json is located and 
execute the following command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skSL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//aka.ms/xplatagent | bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;h3&gt;Let&amp;#39;s build!&lt;/h3&gt;

&lt;p&gt;When all steps are completed, ensure the VSO agent is running and queue a new build. (&lt;em&gt;Note, if you are build a Xamarin project, you need a business license.&lt;/em&gt;)
When the build starts, a console is displayed inside the browser where you can follow all steps along the build process. If the sln path is incorrect, this is also where you can see the current resolved path.&lt;/p&gt;

&lt;p&gt;After a couple of permission errors as described above and incorrect sln path, the result should be this, a green build&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildsucceeded.png&quot; alt=&quot;build succeeded&quot;&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;H&lt;/span&gt;ow to make Continuous Integration with Bitbucket and VSTS, when Bitbucket is not a default service inside VSTS.
&lt;/p&gt;
</description>
        
        <pubDate>Fri, 26 Feb 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/CI-VSTS-Bitbucket-And-Xamarin/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/CI-VSTS-Bitbucket-And-Xamarin/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>CI With VSTS And Xamarin</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;orks on my machine is dead, long live Continuous Integration with mobile development.
&lt;br/&gt;
 Continuous Integration also known as CI is one topic on the developers shelf of best practices. It&#39;s a well integrated part of many development teams today. It helps ensuring code also
 compiles outside the developers own machine also known as works on my machine. In this blog post I&#39;ll explain how to get up and running with CI using Visual Studio Team Services - VSTS on a Xamarin project.  
&lt;/p&gt;

&lt;h3&gt;The mission&lt;/h3&gt;

&lt;p&gt;The goal is to have a CI running and each time a deloper makes a push to the GIT repository, we want to trigger a new build also know as &lt;strong&gt;Continuous Integration&lt;/strong&gt;. The app will be a vanilla Xamarin Forms project.
Further more we&amp;#39;ll see how we can reduce the cost of using the build service in VSTS by making use of an &lt;strong&gt;on premise&lt;/strong&gt; build agent.
&lt;img src=&quot;/assets/img/vstsxamarin.png&quot; alt=&quot;vsts xamarin&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Create VSTS Project&lt;/h3&gt;

&lt;p&gt;The first thing we need, is to create a VSTS project. Log on to &lt;a href=&quot;https://www.visualstudio.com/en-us/products/visual-studio-team-services-vs.aspx&quot;&gt;VSTS&lt;/a&gt; and create a new project.
Here we select &lt;strong&gt;GIT&lt;/strong&gt; as version control, which creates a &lt;strong&gt;GIT repository&lt;/strong&gt; also part of VSTS.
&lt;img src=&quot;/assets/img/vstsnewproject.png&quot; alt=&quot;vsts new project&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Prepare repository credentials for OSX&lt;/h4&gt;

&lt;p&gt;One minor detail is your repository credentials. If your &lt;strong&gt;primary&lt;/strong&gt; VSTS user name contains an &lt;strong&gt;@&lt;/strong&gt; you need to make an username alias before you can clone the repository on osx. Either go to your profile and the &lt;strong&gt;security tab&lt;/strong&gt; or click the &lt;strong&gt;Generate GIT credentials&lt;/strong&gt;
Here you can specify the &lt;strong&gt;alias&lt;/strong&gt; and a &lt;strong&gt;password&lt;/strong&gt;. Recommended by VSTS you can also generate and use a &lt;strong&gt;personal access token&lt;/strong&gt;.
&lt;img src=&quot;/assets/img/altcred.png&quot; alt=&quot;alt credentials&quot;&gt;
With the new repository setup we&amp;#39;re ready to clone it and add a some code. As mentioned I&amp;#39;ve create a vanilla Xamarin Forms project and made the initial push to the repository. VSTS lets you manage your GIT repositories inside VSTS, just as Bitbucket or GitHub etc.&lt;/p&gt;

&lt;h3&gt;Build agent setup and reduce build cost!&lt;/h3&gt;

&lt;p&gt;As we&amp;#39;re are building a project for IOS we need as required by Apple, to build the source code on Apple hardware. Another concern is the cost of having the build performed inside Azure using a &lt;strong&gt;hosted&lt;/strong&gt; build agent, meaning we&amp;#39;ll use Azure clock cycles hence spending more $$ on building our source code.
Currently Azure has no support for building on hosted MAC OS and while we could look for another hosted solution, let&amp;#39;s save the money and make the build on our on premise hardware. This just needs to be some MAC/OSX powered device with the required software installed like Xamarin Studio etc.
If you are using your own developer machine, please notice the build agent will create its own workspace, and not influence your development GIT repository&lt;/p&gt;

&lt;h4&gt;Install build agent&lt;/h4&gt;

&lt;p&gt;Just as building the source on azure, we also need a &lt;strong&gt;build agent&lt;/strong&gt; when we want to have the build &lt;strong&gt;on premise&lt;/strong&gt;. We&amp;#39;ll need to install a build agent on the machine and specify some credentials, making it able to communicate with the build setup in VSTS.
Navigate to the root of your default collection and select the &lt;strong&gt;Agent queues&lt;/strong&gt; tab. Select &lt;strong&gt;Download agent&lt;/strong&gt; and navigate to the &lt;a href=&quot;https://www.npmjs.com/package/vsoagent-installer&quot;&gt;xplat&lt;/a&gt; location.
The recipe is well written so just follow it. Afterwards start the agent. I recommend starting out by running the agent in a terminal to quickly see any error messages. When everything is up and running, just switch over to have the build agent run as a service. 
&lt;img src=&quot;/assets/img/installagent.png&quot; alt=&quot;Install build agent&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Grant bulid agent permissions&lt;/h4&gt;

&lt;p&gt;When I first started the build agent you might get and error message saying something about the agent not being able to listen....permission required....
This is because you need to ensure the crendentials you specify also is granted the permissions to act as a build agent in VSTS. Return to the VSTS website and the &lt;strong&gt;Agent queues&lt;/strong&gt; tab. Here you should now be able to see the build agent running on your on premise machine.
Select the &lt;strong&gt;Roles&lt;/strong&gt; tab and add the account your build agent is using. Add it to both the &lt;strong&gt;Agent Pool Administrators&lt;/strong&gt; and &lt;strong&gt;Agent Pool Service Accounts&lt;/strong&gt; group. 
Restart the build agent and all error messages should now be gone.
&lt;img src=&quot;/assets/img/agentroles.png&quot; alt=&quot;agent roles&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Make CI build definition&lt;/h3&gt;

&lt;p&gt;The final step to enable CI is to make a &lt;strong&gt;build definition&lt;/strong&gt; in VSTS using our build agent. &lt;/p&gt;

&lt;p&gt;From the &lt;strong&gt;BUILD&lt;/strong&gt; menu item on your VSTS project, add a new &lt;strong&gt;Build definition&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/new build definition.png&quot; alt=&quot;new template&quot;&gt;&lt;/p&gt;

&lt;p&gt;Select the Xamarion.IOS template. Afterwards you can just add additional build for other platforms. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/iosTemplate.png&quot; alt=&quot;IOS template&quot;&gt;
On the final page we select GIT as version control, the project we want to build and the branch. This part is really good as it makes it very simple to make different build definitions to feature or release branches.
Ensure you select the non hosted build agent. I installed my agent as the default. If you need to make any changes, just click &lt;strong&gt;Manage&lt;/strong&gt;.
The most important part of this page is to check the &lt;strong&gt;Continuous Integration&lt;/strong&gt; checkbox. Save the template and return to code&lt;strong&gt;&amp;lt;/&amp;gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/CITemplate.png&quot; alt=&quot;CI template&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Verify CI is running.&lt;/h3&gt;

&lt;p&gt;In Xamarin Studio we make a change the source code, &lt;strong&gt;add&lt;/strong&gt;, &lt;strong&gt;commit&lt;/strong&gt; and &lt;strong&gt;push&lt;/strong&gt;... wait a bit and then watch the terminal running your build agent. You should soon see&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Running job:build&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job completed:build&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job Finished:build&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Continuous integration&lt;/strong&gt; is now running with &lt;strong&gt;Visual Studio Team Services&lt;/strong&gt; and &lt;strong&gt;Xamarin&lt;/strong&gt;!&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;orks on my machine is dead, long live Continuous Integration with mobile development.
&lt;br/&gt;
 Continuous Integration also known as CI is one topic on the developers shelf of best practices. It&#39;s a well integrated part of many development teams today. It helps ensuring code also
 compiles outside the developers own machine also known as works on my machine. In this blog post I&#39;ll explain how to get up and running with CI using Visual Studio Team Services - VSTS on a Xamarin project.  
&lt;/p&gt;
</description>
        
        <pubDate>Fri, 22 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Continuous-Integration-With-VSTS-And-Xamarin/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Continuous-Integration-With-VSTS-And-Xamarin/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Facebook Auth with Xamarin Forms and WebAPI CustomGrant - part 3</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;B&lt;/span&gt;ased on the two previous posts, we have a complete setup by now, with a mobile client and an secured API. Now we&#39;ll see how we can consume the API with the access tokens we generated in the previous post and finally display the 
data in the mobile client.
&lt;/p&gt;

&lt;p&gt;You can find part1 &lt;em&gt;Building the mobile client&lt;/em&gt; &lt;a href=&quot;http://rasmustc.com/blog/Custom-Facebook-Authentication-with-webapi/&quot;&gt;here&lt;/a&gt; and part2 &lt;em&gt;WebAPI CustomGrant setup&lt;/em&gt; &lt;a href=&quot;http://rasmustc.com/blog/Custom-Facebook-Authentication-part2/&quot;&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;Extend the API&lt;/h3&gt;

&lt;p&gt;Before we can consume any data from the API, we need to have a controller with an action. We&amp;#39;ll add a &lt;strong&gt;GadgetsController&lt;/strong&gt;. In this sample we&amp;#39;ll add a single HTTP GET endpoint to get a list of gadgets. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[Authorize]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GadgetsController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;MBP&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;IPad mini&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Nexus 5x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tesla Model X&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The important part to notice, is the &lt;strong&gt;[Authorize]&lt;/strong&gt; attribute on top of the class. This ensures the controller and all of it&amp;#39;s actions can only be consumed by authenticated clients. It is possible to deviate from this 
on specific actions.
With this controller in place we&amp;#39;re ready to test the API. Again we do this by consuming the API using POSTMAN, and we do it unauthenticated to ensure authentication works as expected &lt;strong&gt;&lt;font color=&#39;red&#39;&gt;RED&lt;/font&gt;/&lt;font color=&#39;green&#39;&gt;GREEN&lt;/font&gt;&lt;/strong&gt; testing.
As  expected we get a HTTP 401 Unauthorized because we didn&amp;#39;t provide any access token.
&lt;img src=&quot;/assets/img/postmanUnAuth.png&quot; alt=&quot;postman unauth&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Extend the mobile client&lt;/h3&gt;

&lt;p&gt;In our mobile client we ended &lt;a href=&quot;http://rasmustc.com/blog/Custom-Facebook-Authentication-part2/&quot;&gt;part2&lt;/a&gt; with an access token to consume our API. Now we&amp;#39;ll extend the client with a simple view where we&amp;#39;ll consume the gadgets with
the api access token.&lt;/p&gt;

&lt;p&gt;We start by adding a view to the client, one we can navigate to upon successful login. To persist the access token on the client, we&amp;#39;ll use the &lt;strong&gt;Settings&lt;/strong&gt; &lt;a href=&quot;https://github.com/jamesmontemagno/Xamarin.Plugins/tree/master/Settings&quot;&gt;plugin&lt;/a&gt; by 
&lt;a href=&quot;https://twitter.com/JamesMontemagno&quot;&gt;James Montemagno&lt;/a&gt;. Add the package &lt;strong&gt;Xam.Plugins.Settings&lt;/strong&gt; to the solution. The package must be added both to the PCL and Platform specific project. But the Settings implementation will only be in the PCL.
&lt;img src=&quot;/assets/img/settingsplugin.png&quot; alt=&quot;settings plugin&quot;&gt;&lt;/p&gt;

&lt;p&gt;With this package installed we&amp;#39;ll create a simple setting &lt;strong&gt;ApiAccesstoken&lt;/strong&gt; to the pregenerated Settings class, also added by the plugin during package installation. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiAccessTokenKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;apiAccessToken_key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiAccessTokenDefault&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiAccessToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetValueOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiAccessTokenKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiAccessTokenDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AppSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddOrUpdateValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiAccessTokenKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this in place, we can store the API access token like this when we authenticate. After login the app navigate to a &lt;strong&gt;GadgetsView&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationTicket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiAccessToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticationTicket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Access_Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiAccessToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Consuming and listing API data&lt;/h3&gt;

&lt;p&gt;To consume the APIs Gadgets endpoint we will add a &lt;strong&gt;GadgetsViewmodel&lt;/strong&gt; as the &lt;strong&gt;GadgetsView&lt;/strong&gt; will later bind to and display the data we consume in the viewmodel.
The viewmodel will have a method &lt;strong&gt;LoadGadgets&lt;/strong&gt; where we securely load the gadgets. To improve performance we use the nuget package &lt;a href=&quot;https://www.nuget.org/packages/modernhttpclient/&quot;&gt;ModenHttpClient&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadGadgets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NativeMessageHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpRequestMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;RequestUri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://windows:8080/api/gadgets&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                     
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;requestMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Accept&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;requestMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authorization&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthenticationHeaderValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Bearer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiAccessToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SendAsync&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAsStringAsync&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Gadget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We build a &lt;strong&gt;HttpRequestMessage&lt;/strong&gt; of type &lt;strong&gt;GET&lt;/strong&gt; and and specify the api endpoint we want to consume. To the Header of the request we add &lt;strong&gt;application/json&lt;/strong&gt; to ensure the response is formatted as json and finally we add
an &lt;strong&gt;authorization header&lt;/strong&gt; where we specify our API access token, this is the &lt;em&gt;key&lt;/em&gt; to access our protected resource.&lt;/p&gt;

&lt;p&gt;The rest of the implementation to bind the view and the viewmodel can be found in the source code at &lt;a href=&quot;https://github.com/rasmuschristensen/SimpleOAuth&quot;&gt;GitHub&lt;/a&gt;.
When the app is started we are first asked to authenticate with facebook and after successfull login, redirected to the main screen implemented by the GadgetsView, where all the gadgets are loaded and displayed.
&lt;img src=&quot;/assets/img/fblogin.png&quot; alt=&quot;postman unauth&quot;&gt;&lt;img src=&quot;/assets/img/gadgetsview.png&quot; alt=&quot;postman unauth&quot;&gt; &lt;/p&gt;

&lt;p&gt;Source code is available on &lt;a href=&quot;https://github.com/rasmuschristensen/SimpleOAuth&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;B&lt;/span&gt;ased on the two previous posts, we have a complete setup by now, with a mobile client and an secured API. Now we&#39;ll see how we can consume the API with the access tokens we generated in the previous post and finally display the 
data in the mobile client.
&lt;/p&gt;
</description>
        
        <pubDate>Tue, 12 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Custom-Facebook-Authentication-part3/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Custom-Facebook-Authentication-part3/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Facebook Auth with Xamarin Forms and WebAPI CustomGrant - part 2</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt;n the previous post the mobile client was created. In this post we&#39;ll created the WebAPI backend part. We&#39;ll enable
the API to verify a Facebook access token and exhanged it with an access token to our backend, fully supported and integrated with the ASPNET WebAPI.
&lt;/p&gt;

&lt;p&gt;If you haven&amp;#39;t read part1 you can find it &lt;a href=&quot;http://rasmustc.com/blog/Custom-Facebook-Authentication-with-webapi/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Token based authentication with ASPNET WebAPI&lt;/h3&gt;

&lt;p&gt;When working with a disconnected client like a mobile app, OAuth is one way to authenticate with a backend using tokens. Often when using ASPNET WebAPI there will be examples
using ASPNET Identity and entity framework. While this option is valid in many situations, it can in my opinion get a bit bloated with the different layers to support user auth for simple applications.
The goal of this post is to make a Token endpoint in the API, where we&amp;#39;ll receive the Facebook access token, verify it and the exchange it for a valid access token to our system, area 2 and 3 in the figure below.
&lt;img src=&quot;/assets/img/app-fb-api.png&quot; alt=&quot;setup&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Creating the project&lt;/h3&gt;

&lt;p&gt;Start by creating a new Empty ASPNET project and only include the WebAPI references, we want to keep tings as simple as possible.
&lt;img src=&quot;/assets/img/emptyapi.png&quot; alt=&quot;newapi&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Required nuget packages&lt;/h3&gt;

&lt;p&gt;Before adding any code, the following list of nuget packages must be installed.
It&amp;#39;s very important the &lt;strong&gt;Microsoft.Owin.Host.SystemWeb&lt;/strong&gt; package is installed or else OWIN startup will not be executed.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;install-package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Owin&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;install-package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;microsoft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;owin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cors&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;install-package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Owin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Security&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OAuth&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;install-package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Owin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SystemWeb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;install-package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AspNet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Owin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;install-package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Facebook&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For simplicity there is no use of Dependency Injection in this sample project, only the core server. The entrypoint is the &lt;strong&gt;Startup&lt;/strong&gt; class in the root of the solution.&lt;/p&gt;

&lt;h3&gt;OWIN startup pipeline&lt;/h3&gt;

&lt;p&gt;The project will make use of the &lt;strong&gt;OWIN&lt;/strong&gt; pipeline, so we need some additional packages, compared to using Global.asax, these should already be added if all listed backages is installed. Note that Global.asax has been removed from the project.
&lt;img src=&quot;/assets/img/slnOverview.png&quot; alt=&quot;newapi&quot;&gt;&lt;/p&gt;

&lt;h4&gt;Owin Start - Startup.cs&lt;/h4&gt;

&lt;p&gt;This is the main entrypoint to the API. In here we setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Route&lt;/strong&gt; mapping to controllers is enabled.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt; is enabled.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CORS&lt;/strong&gt; is enabled.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[assembly: OwinStartup(typeof(Startup))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;SimpleAPI&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Startup&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAppBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;            
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpConfiguration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;WebApiConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
         
            &lt;span class=&quot;n&quot;&gt;ConfigureAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseCors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Owin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CorsOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllowAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseWebApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;WebApiConfig.Register&lt;/strong&gt; is just the default implementation in this example. Attributed routing is not included, we rely on default Controller and action mapping.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ConfigureAuth&lt;/strong&gt; is the most important part, implemented as partial on Startup named &lt;strong&gt;Startup.Auth.cs&lt;/strong&gt;. It implements the core Token server setup and is added to the API just before the details to allow CORS (This is needed as or mobile clients is on another domain compared to our API)&lt;/p&gt;

&lt;h4&gt;Startup.Auth.cs - TokenServer setup&lt;/h4&gt;

&lt;p&gt;This class holds the configuration of the token server setup. First of all we tell the server to accept token requests on the &lt;strong&gt;/Token&lt;/strong&gt; endpoint.
If our API is hosted on &lt;strong&gt;http://localhost:20000&lt;/strong&gt;, then it will be possible to request a token at &lt;strong&gt;http://localhost:20000/token&lt;/strong&gt;. Meaning this is the endpoint our mobile client should request.
For now the access token expiration time is just set to a random value and there is no support to renew, beside manually send a request to the &lt;strong&gt;/Token&lt;/strong&gt; again.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Startup&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConfigureAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAppBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;OAuthAuthorizationServerOptions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OAuthServerOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OAuthAuthorizationServerOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;AllowInsecureHttp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;TokenEndpointPath&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PathString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/token&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;AccessTokenExpireTimeSpan&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromDays&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;Provider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleAuthTokenProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Token Generation&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseOAuthAuthorizationServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OAuthServerOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseOAuthBearerAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OAuthBearerAuthenticationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;        
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;Provider&lt;/strong&gt; is where we can hook into the generation and validation of access tokens, implemented as SimpleAuthTokenProvider.&lt;/p&gt;

&lt;h4&gt;SimpleAuthTokenProvider.cs - CustomGrant&lt;/h4&gt;

&lt;p&gt;The provider first of all needs to inherit &lt;strong&gt;OAuthAuthorizationServerProvider&lt;/strong&gt;, this makes it possible to override the needed methods
&lt;strong&gt;OAuthAuthorizationServerProvider&lt;/strong&gt; and &lt;strong&gt;OAuthAuthorizationServerProvider&lt;/strong&gt; where the latter is where we want to put our custom logic.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GrantCustomExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OAuthGrantCustomExtensionContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GrantType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ToLower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FacebookClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;accesstoken&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fbClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetTaskAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;me&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;email, first_name, last_name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// place your own logic to lookup and/or create users....&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// your choice of claims...&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClaimsIdentity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticationType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Claim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sub&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{firstname} {lastname}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Claim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;role&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GrantCustomExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Validated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;            
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above code allows us to accept a custom &lt;strong&gt;grant_type&lt;/strong&gt; from a caller and here we say the value should be &lt;strong&gt;facebook&lt;/strong&gt;, a custom phrase we decide. This will also make it quite simple to extend the code
to allow other providers like google etc.
When we get a valid grant_type, we fetch the &lt;strong&gt;accesstoken&lt;/strong&gt; from the request, again we decide what the key should be named. &lt;/p&gt;

&lt;p&gt;The key will contain a facebook access token as its value, the one we requested from Facebook in part1 and posted to the API.
In the beginning where we installed Nuget package, we also installed a Facebook package, this enables us to request Facebook, to verify the provided access token.
The fields we expect needs to match the setup in the app created in the Facebook developer portal.
When we get a response from Facebook, we can extract the expected values and in a real world scenario, we would then make some registration/lookup for the user in our system, but this part is up to you and the your system requirements.
All we do here is creating an identity and finally make the identity validated and that&amp;#39;s it. no more, no less. Our server is now ready to run and provide access tokens to our system.&lt;/p&gt;

&lt;h3&gt;Calling the Token endpoint from Xamarin&lt;/h3&gt;

&lt;p&gt;Now when we have our server created and running we can make the request from our mobile client created in &lt;a href=&quot;http://rasmustc.com/blog/Custom-Facebook-Authentication-with-webapi/&quot;&gt;part1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The code required to take the Facebook access token, send it to our API Token endpoint, and get an access token to our API in response is listed here. The full example is available on GitHub.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModernHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NativeMessageHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FormUrlEncodedContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;accesstoken&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;provider&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticateResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PostAsync&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://windows:8080/Token&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticateResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsSuccessStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticateResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAsStringAsync&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticationTicket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonConvert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeserializeObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticatedUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticationTicket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiAccessToken&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticationTicket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Access_Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Save it to App settings...&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we want to take a look at the return data from the api, we can also make the request from a tool like &lt;strong&gt;POSTMAN&lt;/strong&gt;. All that&amp;#39;s required is a valid Facebook access token, which can be generated at &lt;strong&gt;Facebook Graph API Explorer&lt;/strong&gt;.
&lt;img src=&quot;/assets/img/requesttoken.png&quot; alt=&quot;requesttoken&quot;&gt;
As you can see we get a token of type &lt;strong&gt;Bearer&lt;/strong&gt; in response when we request the &lt;strong&gt;/Token&lt;/strong&gt; endpoint. We now have a complete setup to enable OAuth bearer tokens.
In the next and final part3 of this series we&amp;#39;ll see how we can use the token to request data from our API.&lt;/p&gt;

&lt;p&gt;Source code is available on &lt;a href=&quot;https://github.com/rasmuschristensen/SimpleOAuth&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt;n the previous post the mobile client was created. In this post we&#39;ll created the WebAPI backend part. We&#39;ll enable
the API to verify a Facebook access token and exhanged it with an access token to our backend, fully supported and integrated with the ASPNET WebAPI.
&lt;/p&gt;
</description>
        
        <pubDate>Mon, 11 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Custom-Facebook-Authentication-part2/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Custom-Facebook-Authentication-part2/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Facebook Auth with Xamarin Forms and WebAPI CustomGrant - part 1</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;S&lt;/span&gt;ocial authention with providers is almost a standard in many of todays mobile apps. A lot of authentication is provided either 
directly from the mobile app itself or by an API. In this blog post I&#39;ll show how to do explicit authentication with Facebook in an app built with Xamarin and ASPNET WebAPI, to enable bearer token based authentication.
Part 1 will focus on the app and part 2 will focus on the API.
&lt;/p&gt;

&lt;h3&gt;A little background&lt;/h3&gt;

&lt;p&gt;Some applications have only the client itself and no backend. I often build apps where the client is supported by a backend API. My preferred API technology is ASPNET WebAPI.
When it comes to authentitation with social providers, you&amp;#39;ll often find a lot about how the WebAPI can be setup to support clients like Facebook, Twitter etc. Often by redirecting the client
to some login page hosted by the API. While this is often fine and also for web applications, there are other solutions and also very simple solutions to support your own authentication/registration flow.
I&amp;#39;ve worked with both ThinkTecture IdentityServer and ASPNET WebAPI, but inspired by a lot of reading on &lt;a href=&quot;http://bitoftech.net&quot;&gt;BitOfTech&lt;/a&gt;, I learned a lot more
of how to use WebAPI. With a background developing Single Page Applications with AngularJS, I got a lot of inspiration from especially this series &lt;a href=&quot;http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/&quot;&gt;blog post&lt;/a&gt;.
Just like Single Page Web applications, token based authentication is a perfect fit for mobile applications.&lt;/p&gt;

&lt;h3&gt;The mission&lt;/h3&gt;

&lt;p&gt;We&amp;#39;ll build a mobile Xamarin app, where the app requests Facebook to get an facebook access token &lt;strong&gt;(1)&lt;/strong&gt;. Afterwards we&amp;#39;ll verify &lt;strong&gt;(2)&lt;/strong&gt; and exchange this token with an access token (bearer token) to our system &lt;strong&gt;(3)&lt;/strong&gt;.
&lt;img src=&quot;/assets/img/app-fb-api.png&quot; alt=&quot;setup&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Register the app with facebook&lt;/h3&gt;

&lt;p&gt;First we need an app where we can authenticate with Facebook. The app will request Facebook for a loginpage provided by Facebook.
 This requires the app to be registered inside the &lt;a href=&quot;https://developers.facebook.com/&quot;&gt;Facebook Developer Portal&lt;/a&gt;. We just need to register it as a simple 
 web application with a valid  &lt;strong&gt;OAuth redirect URIs&lt;/strong&gt; to be used when authentication succeeds. When your app is registered, you&amp;#39;ll end up with a &lt;strong&gt;ClientId&lt;/strong&gt;,&lt;strong&gt;ClientSecret&lt;/strong&gt; and a &lt;strong&gt;OAuth redirect URIs&lt;/strong&gt;. The latter needs to be a valid
 endpoint to the API we&amp;#39;ll be creating in part 2.&lt;/p&gt;

&lt;h3&gt;Building the app&lt;/h3&gt;

&lt;p&gt;The app will be created using Xamarin Forms. During this post we&amp;#39;ll only focus on the authentication, making a simple app that will redirect to authentication as soon as it starts. I a realworld application you might want to check settings
to see if the user already did sign in.
Because we&amp;#39;re using Xamarin Forms we&amp;#39;ll create a &lt;strong&gt;CustomRenderer&lt;/strong&gt; for each platform IOS/Android. The PageRenderer for IOS is displayed here and the source is available from &lt;a href=&quot;https://github.com/rasmuschristensen/SimpleOAuth&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ViewDidAppear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewDidAppear&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;OAuth2Authenticator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OAuth2Authenticator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;clientId&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1519399498360864&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;authorizeUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://www.facebook.com/dialog/oauth&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;redirectUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://windows:8080/login_success.html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// we do this to be able to control the cancel flow outself...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AllowCancel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Completed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Properties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;access_token&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ModernHttpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NativeMessageHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FormUrlEncodedContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;accesstoken&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KeyValuePair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;grant_type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;facebook&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;


            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authenticateResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PostAsync&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uri&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://windows:8080/Token&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authenticateResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsSuccessStatusCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//get api access bearer token from api&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// store user is logged in, request additional info...&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PresentMain&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;           
        
    &lt;span class=&quot;n&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetUI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddChildViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// add out custom cancel button, to be able to navigate back&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChildViewControllers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NavigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LeftBarButtonItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIBarButtonItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UIBarButtonSystemItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Navigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PopModalAsync&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
 

&lt;p&gt;The code above is very explicit, all the auth settings might be stored inside app settings, but in this sample app we don&amp;#39;t hide anything. The clientId is the FaceBook clientId we got earlier when we registered the app on facebook
 It&amp;#39;s important that the &lt;strong&gt;redirectUrl&lt;/strong&gt; matches the one also registered on facebook as &lt;strong&gt;OAuth redirect URIs&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If everything is setup and the above app is started in either emulator or device, the app should start and immediately redirect to a webview with the facebook login page. This happens because we create the OAuth2Authenticator by using the 
Xamarin.Auth component and make a request to FaceBook OAuth Url. When you enter your username and password for Facebook, the &lt;strong&gt;Completed&lt;/strong&gt; event will be fired and we&amp;#39;ll get a status of authenticated or Unauthenticated. Here we expect it to authenticated.
Authenticated also means we&amp;#39;ll receive the users facebook access token inside the event arguments, which we&amp;#39;ll use to register/signup in our own backend. Before we finally accept the user as being fully authenticated we need to register with the API. As shown above, we do this by making a simple http POST request to our API &lt;em&gt;(This API will be created in part 2, for now we just expect it to be there)&lt;/em&gt;. Finally when we get the api access token of type bearer from the API request and we are now ready to proceed with our app.&lt;/p&gt;

&lt;p&gt;Source code is available on &lt;a href=&quot;https://github.com/rasmuschristensen/SimpleOAuth&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;S&lt;/span&gt;ocial authention with providers is almost a standard in many of todays mobile apps. A lot of authentication is provided either 
directly from the mobile app itself or by an API. In this blog post I&#39;ll show how to do explicit authentication with Facebook in an app built with Xamarin and ASPNET WebAPI, to enable bearer token based authentication.
Part 1 will focus on the app and part 2 will focus on the API.
&lt;/p&gt;
</description>
        
        <pubDate>Wed, 06 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Custom-Facebook-Authentication-with-webapi/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Custom-Facebook-Authentication-with-webapi/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Consume an IISExpress hosted WebAPI from OSX</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;D&lt;/span&gt;eveloping a mobile application with Xamarin on OSX consuming a WebAPI hosted on windows, can be a bit complicated if you want to run everything local and keep things as simple
as possible. The goal of this post is a step by step to consume an IISExpress hosted WebAPI running in a VMWare Fusion virtual machine with Windows 10 from OSX. Most of the steps should be similar if you are running
 Parallels instead of VMWare Fusion. 
&lt;/p&gt;

&lt;p&gt;When running a basic WebAPI locally, the default setup in Visual Studio is to use IIS Express, you can use Local IIS but my goal is to use IIS Express to keep things as simple as possible.&lt;/p&gt;

&lt;h2&gt;Creating the API in Windows&lt;/h2&gt;

&lt;p&gt;Creating the WebAPI is out of scope for this post, but basically follows the description &lt;a href=&quot;http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api&quot;&gt;here&lt;/a&gt;. 
Whether you want to use OWIN is not important, but I would recommend it. Ensure you have a simple controller &lt;strong&gt;ValuesController&lt;/strong&gt; with no authentication applied and a single action to consume a value.
For the purpose of this post we just need the action to return a simple value. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValuesController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;    [HttpGet]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Press F5 to ensure the API can run and try to consume the value using POSTMAN chromeextension e.g.
We are still on the windows host and should get the following result based on the request.
&lt;img src=&quot;/assets/img/consume_api.png&quot; alt=&quot;consumeapi&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Bridge mode network&lt;/h2&gt;

&lt;p&gt;The first step to allow access is to ensure the virtual machine is running with network in bridge mode. For VMWare Fusion I&amp;#39;ve written about it here
&lt;a href=&quot;http://rasmustc.com/blog/ATS-and-local-dev/&quot;&gt;ATS and local dev&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Expose the URL of the API&lt;/h2&gt;

&lt;p&gt;To allow an incoming request to the host to be directed to IISExpress, execute the following command &lt;strong&gt;ipconfig&lt;/strong&gt; from powershell running as administrator to get your current ip
&lt;img src=&quot;/assets/img/getipv4.png&quot; alt=&quot;get ip&quot;&gt;
With the IP in hand, execute the following command&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;netsh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlacl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;192&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;168&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;1586&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;everyone&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A small note to executing the command specified above. The &lt;strong&gt;user&lt;/strong&gt; part must be localized according to your current windows settings or else you&amp;#39;ll get an error. You could also use your computername instead of ip.&lt;/p&gt;

&lt;h2&gt;Add a binding to IISExpress&lt;/h2&gt;

&lt;p&gt;To ensure our API is resolved when we make a request and the &lt;em&gt;API is running&lt;/em&gt;, we need to add an additional binding to the API projects applicationhost.config file. This file is located at:
&lt;strong&gt;PathToYourProject\.vs\config\applicationhost.config&lt;/strong&gt;. Edit the file and locate the &lt;strong&gt;&amp;lt;Bindings&amp;gt;&lt;/strong&gt; section under your projectname. My config looks like the configuration below where I&amp;#39;ve added both a specific binding to my IP on port 1586
and a binding to the computername &lt;strong&gt;windows&lt;/strong&gt; on port 8080. Remember to specify different port numbers or else the API will fail during startup.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;site&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ExposeAPI&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;applicationPool=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Clr4IntegratedAppPool&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;virtualDirectory&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;physicalPath=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C:\dev\exposeapi&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bindings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bindingInformation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*:1585:localhost&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bindingInformation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*:1586:192.168.1.234&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;binding&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;protocol=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bindingInformation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*:8080:windows&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bindings&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/site&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Firewall private access rule&lt;/h2&gt;

&lt;p&gt;The last thing to configure is the firewall. Be sure to only configure a rule for your private network. You can either use the graphical firewall client on windows and specify the path to IISExpress.
Or use this command from Powershell. Note the portnumber at the end os the command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span class=&quot;n&quot;&gt;netsh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;advfirewall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firewall&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;IISExpressWeb&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TCP&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;8080&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Making a request from OSX&lt;/h2&gt;

&lt;p&gt;Finally it&amp;#39;s time to test the API from OSX. As with windows I&amp;#39;m using POSTMAN to test the API. Testing the command this way would result in the same as consuming the API from a mobile client using httpclient
&lt;img src=&quot;/assets/img/osx2win.png&quot; alt=&quot;osx2win&quot;&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;D&lt;/span&gt;eveloping a mobile application with Xamarin on OSX consuming a WebAPI hosted on windows, can be a bit complicated if you want to run everything local and keep things as simple
as possible. The goal of this post is a step by step to consume an IISExpress hosted WebAPI running in a VMWare Fusion virtual machine with Windows 10 from OSX. Most of the steps should be similar if you are running
 Parallels instead of VMWare Fusion. 
&lt;/p&gt;
</description>
        
        <pubDate>Sun, 03 Jan 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Consume-IISExpress-WebAPI-from-OSX/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Consume-IISExpress-WebAPI-from-OSX/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>ATS and local development with Xamarin</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;A&lt;/span&gt;fter working with Xamarin for a while, one of the things I spent a lot of time on, was how to cosume an API running on Windows and hosted in VmWare Fusion from
a mobile Xamarin client running in either simulator or on a device.
&lt;/p&gt;

&lt;p&gt;As a .NET developer, my primary development IDE has been Visual Studio for many years. When I started doing Xamarin development, I went with 
Xamarin Studio, primarily because of the licensesing cost, but also to challenge myself with OSX and Xamarin Studio.
Based on this setup I&amp;#39;m hosting windows in a virtual machine using Vmware Fusion, with Visual Studio. And most of the time this will be where my mobile backend will be running during development.&lt;/p&gt;

&lt;h2&gt;Consuming a windows hosted API from OSX&lt;/h2&gt;

&lt;p&gt;The basic key to consume a window hosted API from OSX is the network setup. With VmWare Fusion, It&amp;#39;s pretty easy, using a &lt;a href=&quot;https://en.wikipedia.org/wiki/Bridging_(networking)&quot;&gt; network bridge&lt;/a&gt;.
From VmWare select &lt;strong&gt;Virtual Machine&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Network Adapter&lt;/strong&gt;
&lt;img src=&quot;/assets/img/bridgenetwork.png&quot; alt=&quot;Bridge network&quot;&gt; 
Inside this menu select &lt;strong&gt;Bridged Networking&lt;/strong&gt; and the &lt;strong&gt;Wi-fi&lt;/strong&gt; option. With this enabled it&amp;#39;s now possible to consume a VmWare Fusion hosted Windows WebAPI from Xamarin running the client   on OSX.&lt;/p&gt;

&lt;h2&gt;Http for local dev...the ATS issue on IOS&lt;/h2&gt;

&lt;p&gt;While it&amp;#39;s pretty easy to make the network bridge between OSX and Windows, the next bump on the road during development is &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW33&quot;&gt;Application Transport Security&lt;/a&gt;, (ATS - NSAppTransportSecurity).
Since IOS 9.0, Apple by default requre all communication to be secure, meaning https. As all projects starts small, this would be a bit of pain, and luckily there is an option to avoid this while developing on your local machine.&lt;/p&gt;

&lt;p&gt;If you run a vanilla Xamarin Forms project and try to consume a Windows API as described above, you&amp;#39;ll get this message,
but only if you taget IOS 9.0 or above.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/iosATS.png&quot; alt=&quot;IOS ATS&quot;&gt; &lt;/p&gt;

&lt;h2&gt;Optional ATS using info.plist&lt;/h2&gt;

&lt;p&gt;To workaround this issue during local development (in production you should always use secure communication) you can add a new entry to the info.plist
in the Xmarin.ios project in your solution.
Locate the file and select the &lt;strong&gt;source&lt;/strong&gt; tab in the bottom of the file. Add a new entry to the file, either directly in Xamarin Studio, or in another text editor, this is just a plain xml file.
Add the entry &lt;strong&gt;NSAppTransportSecurity&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAppTransportSecurity&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;NSAllowsArbitraryLoads&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Afterwards your infp.plist will should look like this
&lt;img src=&quot;/assets/img/infoplistchange.png&quot; alt=&quot;info plist change&quot;&gt; &lt;/p&gt;

&lt;p&gt;This will enable you to switch ATS on/off. Now turn it off and run the same code as before. This time you&amp;#39;ll be able to consume the API without being blocked by 
the lack of insecure communication.&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;A&lt;/span&gt;fter working with Xamarin for a while, one of the things I spent a lot of time on, was how to cosume an API running on Windows and hosted in VmWare Fusion from
a mobile Xamarin client running in either simulator or on a device.
&lt;/p&gt;
</description>
        
        <pubDate>Sun, 06 Dec 2015 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/ATS-and-local-dev/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/ATS-and-local-dev/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Compile XAML with Xamarin</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;O&lt;/span&gt;ne of the new features in Xamarin 4 and Xamarin Forms 2.0 is the ability to compile Xaml views.
 This feature should reduce view load time, the compiled app size, the catch might be an increase in compilation time, so let&#39;s see how
 this works.
&lt;/p&gt;

&lt;h2&gt;Xaml runtime error&lt;/h2&gt;

&lt;p&gt;First we created a basic Xamarin cross platform project based on Xamarin Forms. Ensure to update the Xamarin.Forms nuget packages to version 2.x.
Add a Xaml view to the project with a simple Button control and two properties Id and Text (...Yes the Id is not valid, let&amp;#39;s verify it.)
&lt;img src=&quot;/assets/img/InvalidXaml.png&quot; alt=&quot;xamarin invalid attr&quot;&gt;
Before Xamarin Forms 2.0 this would compile just fine, and if we didn&amp;#39;t do anything to the current project in Xamarin 2.0, compilation will also complete without any errors.
If we start the app either in the simulator or on a device, we would get a runtime error.
&lt;img src=&quot;/assets/img/xamlruntimeerror.png&quot; alt=&quot;xamarin runtime error&quot;&gt;&lt;br&gt;
As expected the &amp;quot;Id&amp;quot; property is invalid. 
As this is a very simple example, this could however be something deep inside our app and not that easy to locate.&lt;/p&gt;

&lt;h2&gt;Enabling Xaml Compilation&lt;/h2&gt;

&lt;p&gt;The new feature to enable the XamlC, Xaml Compiler - can be enabled at either assembly level or class level or in a mix of both. It&amp;#39;s located in the namespace
&lt;strong&gt;Xamarin.Forms.Xaml&lt;/strong&gt;. 
Locate the App class and above the namespace definition, add the following codesnippet.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms.Xaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[assembly: XamlCompilation (XamlCompilationOptions.Compile)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Build the project again and now the code won&amp;#39;t compile, with the following error, but luckily this time, we caught it during compilation.
&lt;img src=&quot;/assets/img/compileerror.png&quot; alt=&quot;xamarin compile error&quot;&gt;
It&amp;#39;s also possible to add Xaml compilation to a specific view, simply by added the same attribute as before without &lt;strong&gt;assembly:&lt;/strong&gt; to at the class level of a view.
The result is the same as before, except this time Xaml compilation is only enabled for a specific view.
&lt;img src=&quot;/assets/img/xamlcompilationclass.png&quot; alt=&quot;xamarin compile error&quot;&gt;&lt;/p&gt;

&lt;p&gt;Finally it&amp;#39;s possible to either add and mix multiple class level Xaml compilations or if you enabled it at assembly level, you can exclude it for specific viewsby selecting
&lt;strong&gt;.Skip&lt;/strong&gt; instead of &lt;strong&gt;.Compile&lt;/strong&gt; at class level
 &lt;img src=&quot;/assets/img/xamlcompileskip.png&quot; alt=&quot;xamarin compile skip&quot;&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;O&lt;/span&gt;ne of the new features in Xamarin 4 and Xamarin Forms 2.0 is the ability to compile Xaml views.
 This feature should reduce view load time, the compiled app size, the catch might be an increase in compilation time, so let&#39;s see how
 this works.
&lt;/p&gt;
</description>
        
        <pubDate>Wed, 25 Nov 2015 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/compiled-xaml-views/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/compiled-xaml-views/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Namespaces in Xamarin Studio</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt;f you like me have a background using Visual Studio, one of the first things you&#39;ll notice after a little
coding in Xamarin Studio is the default namespace handling. In Visual Studio namespaces per default follows the folder structure hierarchical.
In Xamarin Studio is&#39;s just the opposite, a flat namespace stucture.
&lt;/p&gt;

&lt;p&gt;To get the same behaviour in Xamarin Studio as in Visual Studio, goto 
&lt;strong&gt;Preferences -&amp;gt; Source Code -&amp;gt; .NET Naming Policies&lt;/strong&gt;. and select &lt;strong&gt;Hierarchical&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/xamarinnamespaces.png&quot; alt=&quot;xamarin studio&quot;&gt; &lt;/p&gt;

&lt;p&gt;Please note this is best done on a new project. If not, you have to manually ensure all namespaces are set correctly.&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt;f you like me have a background using Visual Studio, one of the first things you&#39;ll notice after a little
coding in Xamarin Studio is the default namespace handling. In Visual Studio namespaces per default follows the folder structure hierarchical.
In Xamarin Studio is&#39;s just the opposite, a flat namespace stucture.
&lt;/p&gt;
</description>
        
        <pubDate>Tue, 24 Nov 2015 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/namespaces-in-xamarin-studio/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/namespaces-in-xamarin-studio/</guid>
        
        
      </item>
      
    
  </channel>
</rss>
