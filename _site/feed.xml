<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rasmus Tolstrup Christensen</title>
    <description>All about Xamarin and dotnet</description>
    <link>http://rasmustc.com/</link>
    <atom:link href="http://rasmustc.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 06 Jun 2016 18:37:32 +0200</pubDate>
    <lastBuildDate>Mon, 06 Jun 2016 18:37:32 +0200</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      
      <item>
        <title>Monitor Mobile Traffic On OSX</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;D&lt;/span&gt;eveloping a mobile app on OSX with Xamarin or any other tooling, you might run into the situation when you want to see what&#39;s being transfered over the wire. As a long time Windows developer I&#39;ve been use to Fiddler, but what do you do when you&#39;re on OSX? 
&lt;/p&gt;

&lt;h3 id=&quot;charles-the-simple-tool&quot;&gt;Charles, the simple tool&lt;/h3&gt;
&lt;p&gt;Maybe you have a situation where you want to see what’s beeing sent across the wire in an http request, like a header. Maybe as in my case you add an authentication token or an IF-MODIFIED-SINCE header and want to check the timestamp in the request. In either case, we need a tool to monitor the traffic. Further more we also need a tool that can act as a proxy to the mobile device. Just as your devlopment machine, the device itself has its own separate network connection. To monitor the mobile device’ traffic on the development machine, we need to route the traffic to it, we need a proxy.&lt;/p&gt;

&lt;p&gt;After some searching I found a tool called &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;. 
&lt;em&gt;“Charles is an HTTP proxy / HTTP monitor / Reverse Proxy that enables a developer to view all of the HTTP and SSL / HTTPS traffic between their machine and the Internet. This includes requests, responses and the HTTP headers (which contain the cookies and caching information)”&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;charles-setup&quot;&gt;Charles setup&lt;/h3&gt;
&lt;p&gt;Charles is a paid product, not expensieve ~50$, and there is a trial you can use for some days and 30 min at a time.
To use Charles as a proxy, you first need to locate your own ip. Either goto &lt;strong&gt;System preferences -&amp;gt; Network&lt;/strong&gt; and locate the IP
&lt;img src=&quot;/assets/img/webproxy/systemnetwork.png&quot; alt=&quot;find ip&quot; /&gt;
Or you can use the command &lt;strong&gt;ifconfig&lt;/strong&gt; from a terminal. 
&lt;img src=&quot;/assets/img/webproxy/ifconfig.png&quot; alt=&quot;find ip&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;configure-your-mobile-device-to-use-the-proxy&quot;&gt;Configure your mobile device to use the proxy.&lt;/h3&gt;
&lt;p&gt;When charles is running, we need to route the mobile device to the proxy. On iOS go to &lt;strong&gt;Settings -&amp;gt; WiFi&lt;/strong&gt; Select your current network connection and tap the &lt;strong&gt;“i”&lt;/strong&gt; information icon to the right of the network. This brigs you to some details of the network. At the bottom, locate the Http-Proxy and select &lt;strong&gt;Manual&lt;/strong&gt;. Type in the IP we located before and port 8888, by default Charles is setup to act as a proxy on port 8888. Disable authentication. Now all network traffice from the mobiel device will be routed through the proxy.
&lt;img src=&quot;/assets/img/webproxy/ios.png&quot; alt=&quot;setup ios&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ready-to-monitor&quot;&gt;Ready to monitor&lt;/h3&gt;
&lt;p&gt;When you make some interaction with an app, you can now follow the communication in &lt;strong&gt;Charles&lt;/strong&gt;. You might see a lot of “noise”, as other apps also use the network and it can be hard to follow just your requests to a specific endpoint. Charles has a simple feature called &lt;strong&gt;Focus&lt;/strong&gt;. You simple select &lt;strong&gt;Structure&lt;/strong&gt; at the main layout and right click one of your requests and to &lt;strong&gt;Focus&lt;/strong&gt; from the menu. Now your requests will be grouped at the top of the treeview and all other traffic will be moved into a node called &lt;strong&gt;Other hosts&lt;/strong&gt;. Simple and to the point. As with other similar monitoring tools, you can now see and browse all request/response your app is making.
&lt;img src=&quot;/assets/img/webproxy/charles.png&quot; alt=&quot;charles&quot; /&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;D&lt;/span&gt;eveloping a mobile app on OSX with Xamarin or any other tooling, you might run into the situation when you want to see what&#39;s being transfered over the wire. As a long time Windows developer I&#39;ve been use to Fiddler, but what do you do when you&#39;re on OSX? 
&lt;/p&gt;

</description>
        
        <pubDate>Mon, 06 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://rasmustc.com/blog/Monitor-Network-Traffic-From-OSX/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Monitor-Network-Traffic-From-OSX/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Orientation in Xamarin Forms</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;hen my device is rotated I want the screen to rotate, but for this screen I only want to allow portrait mode? Sounds pretty simple and so it should be. When it comes to Xamarin Forms, you might run into a wall, let&#39;s break it. 
&lt;/p&gt;

&lt;p&gt;Before writing this post I searched for a solution and found a lot of issues around Xamarin Forms and orientation. In the future this might be fixed but for now this is the solution I found to solve the problem.&lt;/p&gt;

&lt;h3 id=&quot;device-orientation-ios&quot;&gt;Device orientation IOS&lt;/h3&gt;
&lt;p&gt;In one of my projects, I ran into the situation described above. Some views should be allowed to rotate while others shouldn’t. Targeting IOS, the way you allow rotation is to define it inside &lt;strong&gt;info.plist&lt;/strong&gt;. Here you can define either specific allowed orientation or all, all pretty simple. 
&lt;img src=&quot;/assets/img/orientation/infoplist.png&quot; alt=&quot;infoplist&quot; /&gt;
But when it comes to Xamarin Forms, you can’t really define within a specific view, that you want it only in a specific orientation. Imagine you had a view with a signature control and you want &lt;strong&gt;Landscape&lt;/strong&gt; orientation to be enabled, but for the rest of the application only &lt;strong&gt;Portrait&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;the-basic-of-orientation-on-ios&quot;&gt;The basic of orientation on IOS&lt;/h3&gt;
&lt;p&gt;When you have the allowed orientations defined inside &lt;strong&gt;info.plist&lt;/strong&gt;, you can set the supported orientations of the current view by overriding &lt;strong&gt;GetSupportedInterfaceOrientations&lt;/strong&gt; in &lt;strong&gt;AppDelegate.cs&lt;/strong&gt;. This method returns an &lt;strong&gt;UIInterfaceOrientationMask&lt;/strong&gt; where the allowed orientation(s) for a specific view can be overridden, exactly what we want to achieve.&lt;/p&gt;

&lt;h3 id=&quot;view-orientation-responsibility&quot;&gt;View orientation responsibility&lt;/h3&gt;
&lt;p&gt;Before we dive deeper into the implementation of &lt;strong&gt;GetSupportedInterfaceOrientations&lt;/strong&gt;, we first need a way to let each view communicate its supported orientations. To do this we introduce the &lt;strong&gt;ISupportOrientation&lt;/strong&gt; interface.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISupportOrientation&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DeviceOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SupportedOrientation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceOrientation&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Landscape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Portrait&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A pretty simple interface, in my case I added it to the PCL, as that’s the common setup of my projects, but it should work fine with &lt;strong&gt;Shared&lt;/strong&gt; projects too. Together with the interface, we also add an enum &lt;strong&gt;DeviceOrientation&lt;/strong&gt;. Feel free to add additional orientations as you need them. 
An implementation of a view that implements &lt;strong&gt;ISupportOrientation&lt;/strong&gt; might look like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SignatureView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ContentPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISupportOrientation&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SignatureView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nf&quot;&gt;InitializeComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SupportedOrientation&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Landscape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Portrait&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;isupportorientation-in-action&quot;&gt;ISupportOrientation in action&lt;/h3&gt;
&lt;p&gt;Now that our view is ready, let’s return to &lt;strong&gt;AppDelegate.cs&lt;/strong&gt; and &lt;strong&gt;GetSupportedInterfaceOrientations&lt;/strong&gt;. Depending on your application, the orientation rules might change, but in this example I defined &lt;strong&gt;Portrait&lt;/strong&gt; to be the default orientation.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIInterfaceOrientationMask&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetSupportedInterfaceOrientations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIWindow&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIInterfaceOrientationMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Portrait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainPage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NavigationPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;navigationPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orientationPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentPage&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ISupportOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orientationPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;UIInterfaceOrientationMask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supportedMask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UIInterfaceOrientationMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orientation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;orientationPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SupportedOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceOrientations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Portrait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;supportedMask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIInterfaceOrientationMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Portrait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DeviceOrientations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Landscape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;supportedMask&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIInterfaceOrientationMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Landscape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	  &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

     &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;supportedMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIInterfaceOrientationMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Portrait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see this is a pretty simple implementation and not optimized in any special way. We check the current view for the &lt;strong&gt;ISupportOrientation&lt;/strong&gt; and if multiple orientations is supported they are combined in the &lt;strong&gt;UIInterfaceOrientationMask&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The implementation is available as a Gist &lt;a href=&quot;https://gist.github.com/rasmuschristensen/5cfee152366eb19adac599a606b857e6/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;hen my device is rotated I want the screen to rotate, but for this screen I only want to allow portrait mode? Sounds pretty simple and so it should be. When it comes to Xamarin Forms, you might run into a wall, let&#39;s break it. 
&lt;/p&gt;

</description>
        
        <pubDate>Thu, 02 Jun 2016 00:00:00 +0200</pubDate>
        <link>http://rasmustc.com/blog/Orientation-In-Xamarin-Forms/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Orientation-In-Xamarin-Forms/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Latte Art With Xamarin Grid</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;A&lt;/span&gt; very common task when working with UI is to stack elements upon each other in a z-order. Often a bit complicated task, using either a Relative- or AbsoluteLayout in Xamarin Forms. Why not use a Grid for simple tasks, like making latte art? 
&lt;/p&gt;

&lt;h3 id=&quot;simple-stacking-can-be-made-complex&quot;&gt;Simple stacking can be made complex&lt;/h3&gt;
&lt;p&gt;A while back I had to stack some UI elements in a project. Making a relative simple overlay, one image on top of another. One of the resources on the topic I found was 
(Xamarin.Forms in anger, Mall)[https://www.syntaxismyui.com/xamarin-forms-in-anger-mall-dash/] by Adam J Wolf. A great example of using the &lt;strong&gt;RelativeLayout&lt;/strong&gt;. Also a bit complex just to stack single elements. &lt;strong&gt;&lt;em&gt;Please note that if you need more control of the layout you should follow the great example by Adam&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;we-got-a-simpler-solution&quot;&gt;We got a simpler solution&lt;/h3&gt;
&lt;p&gt;While &lt;strong&gt;Absolute-&lt;/strong&gt; and &lt;strong&gt;-RelativeLayout&lt;/strong&gt; works great, especially if you have a complex overlay they are the ones to use. In my case I just needed a single element overlay. As we already use Grid as a layout in many views, we know that elements are added to rows and columns by specifying an index like Grid.Row=”0” etc. Now what happens if we add multiple elements to the same index?
&lt;strong&gt;The will be stacked!!&lt;/strong&gt;, first element at the bottom, the next one above and so on. Let’s try, by simple adding a grid to a page and add 2 images to the same row.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;BackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RowDefinitions&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;RowDefinition&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/RowDefinition&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;/Grid.RowDefinitions&amp;gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;Image&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;Grid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Row=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coffee.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Image&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;Image&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;Grid&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Row=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,-40,0,0&quot;&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foam.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Image&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result speaks for itself!
&lt;strong&gt;Your coffee is servered&lt;/strong&gt;
&lt;img src=&quot;/assets/img/gridstack/coffeestack.png&quot; alt=&quot;coffee&quot; /&gt;
And why not add an &lt;strong&gt;ActivityIndicator&lt;/strong&gt; while brewing, it’s just another element to stack.
&lt;img src=&quot;/assets/img/gridstack/coffeebrew.png&quot; alt=&quot;coffeebrew&quot; /&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;A&lt;/span&gt; very common task when working with UI is to stack elements upon each other in a z-order. Often a bit complicated task, using either a Relative- or AbsoluteLayout in Xamarin Forms. Why not use a Grid for simple tasks, like making latte art? 
&lt;/p&gt;

</description>
        
        <pubDate>Mon, 30 May 2016 00:00:00 +0200</pubDate>
        <link>http://rasmustc.com/blog/Latte-Art-With-Xamarin-Grid/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Latte-Art-With-Xamarin-Grid/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Black and white images with Xamarin</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;hen you take a picture with the phones camera or choose one from the image gallery, how do you then make it black and white?  
&lt;/p&gt;

&lt;h3 id=&quot;pure-xamarin&quot;&gt;Pure Xamarin&lt;/h3&gt;
&lt;p&gt;This post is a general purpose of how to turn a picture from colored to black and white. It’s made with pure Xamarin, and if you want to use it in a Xamarin Forms project, just wrap is as a platform dependency, using &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/dependency-service/introduction/&quot;&gt;DependencyService&lt;/a&gt;. This implementation will focus on the IOS version.&lt;/p&gt;

&lt;h3 id=&quot;lets-code&quot;&gt;Let’s code&lt;/h3&gt;

&lt;p&gt;The code we’ll use is this one. Notice I wrapped it in a method with a parameter ot type &lt;strong&gt;byte[]&lt;/strong&gt; which is the image to convert, and a return value of type &lt;em&gt;_byte[]&lt;/em&gt; the black and white edition of the image.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MakeGrayScale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageAsBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ImageFromByteArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageAsBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageRect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGBitmapContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CGBitmapContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
											&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
											&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGColorSpace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDeviceGray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
											&lt;span class=&quot;n&quot;&gt;CGImageAlphaInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DrawImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imageRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;UIKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertedImage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
														 &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Orientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convertedImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsJPEG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The concept is to make a new canvas of the same dimension as the original image, the &lt;strong&gt;context&lt;/strong&gt;. When we define the context, we can also define a &lt;strong&gt;ColorSpace&lt;/strong&gt;. Here we can choose &lt;strong&gt;CreateDeviceGray&lt;/strong&gt; to make it black and white and we also remoce the Alpha.
With the context and the &lt;strong&gt;rectangle&lt;/strong&gt; in the same dimension as the original image, we can draw the &lt;em&gt;new&lt;/em&gt; image on the &lt;strong&gt;canvas&lt;/strong&gt;.
Finally we need to create a new &lt;strong&gt;UIImage&lt;/strong&gt; from the context and the orientation of the original image. We now have a copy of the original image, with a different &lt;strong&gt;ColorSpace&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The last step in the code snippet converts the image to JPEG and ensures we return it as &lt;strong&gt;byte[]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find the samle code as a gist &lt;a href=&quot;https://gist.github.com/rasmuschristensen/db61ca59c06fabb9201f60c7413646a7&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;hen you take a picture with the phones camera or choose one from the image gallery, how do you then make it black and white?  
&lt;/p&gt;

</description>
        
        <pubDate>Thu, 26 May 2016 00:00:00 +0200</pubDate>
        <link>http://rasmustc.com/blog/Black-And-White-Images-With-Xamarin/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Black-And-White-Images-With-Xamarin/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Code Templates In Xamarin Studio</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;riting the same code structure over and over seems a bit non productive. Luckily there is a simple way in Xamarin Studio to remove this repetative work and speed up things, __Code Templates__  
&lt;/p&gt;

&lt;h3 id=&quot;basic-code-templates&quot;&gt;Basic Code Templates&lt;/h3&gt;
&lt;p&gt;Out of the box Xamarin Studio offers some default Code Templates. If you type &lt;strong&gt;prop&lt;/strong&gt; followed by tapping &lt;strong&gt;TAB&lt;/strong&gt; twice in the editor, you get a default structure of a property. This will bring the template a live and you can the enter the &lt;strong&gt;type&lt;/strong&gt; press &lt;strong&gt;TAB&lt;/strong&gt; and the the name of the property. All very simple and useful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/codetemplate.gif&quot; alt=&quot;appvideo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;writing-your-own-custom-code-templates&quot;&gt;Writing your own custom Code Templates&lt;/h3&gt;
&lt;p&gt;You can use the built in  &lt;strong&gt;Code Templates&lt;/strong&gt;, but often you use a third party library with a specific code style or you have some kind of code convention in your team. This is where you quite easy can create your own code templates.&lt;/p&gt;

&lt;p&gt;One of the plugins I use very often is &lt;a href=&quot;https://github.com/jamesmontemagno/mvvm-helpers&quot;&gt;MVVMHelpers&lt;/a&gt;
The syntax for setting a property with this library is as follow where the property is implemented using a backing field.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As this is not the default syntax for the default &lt;strong&gt;prop&lt;/strong&gt; template (part of Xamarin Studio by default) , we need to implement a new one.
Start by opening &lt;strong&gt;Preferences -&amp;gt; Text Editor -&amp;gt; Code Templates&lt;/strong&gt;. Here you’ll see a list of all the existing templates. Click &lt;strong&gt;Add&lt;/strong&gt; to create a new template.
//IMAGE
Enter a &lt;strong&gt;name&lt;/strong&gt;, &lt;strong&gt;description&lt;/strong&gt; and a &lt;strong&gt;group&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now when it comes to the template we need to follow a specific syntax, as we want the consumer of the template to be able to specify the type and name of our property. As you can see I enter &lt;strong&gt;%type%&lt;/strong&gt; for the type &lt;strong&gt;_%name%&lt;/strong&gt; for the backing field, the _ is just part of my coding style. Finally &lt;strong&gt;%NAME%&lt;/strong&gt; as the name of the property&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; 
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		 &lt;span class=&quot;nf&quot;&gt;SetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see this can speed things up a bit and save you from writing boiler plate code over and over. As an enhancement you can also make use of the &lt;strong&gt;%end%&lt;/strong&gt; keyword, to decide where the cursor should be positioned after the template is complete. An idea for another code tempate might be unit testing with the &lt;strong&gt;Arrange&lt;/strong&gt; &lt;strong&gt;Act&lt;/strong&gt; &lt;strong&gt;Assert&lt;/strong&gt; pattern &lt;strong&gt;AAA&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-could-code-templates-be-improved&quot;&gt;How could Code Templates be improved&lt;/h3&gt;
&lt;p&gt;One thing that would be really great would be the ability to &lt;strong&gt;share&lt;/strong&gt; code templates among your team as you can with Visual Studio and Resharper, or just to have a Code Template sharing repository to consume.&lt;/p&gt;

</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;riting the same code structure over and over seems a bit non productive. Luckily there is a simple way in Xamarin Studio to remove this repetative work and speed up things, __Code Templates__  
&lt;/p&gt;

</description>
        
        <pubDate>Mon, 25 Apr 2016 00:00:00 +0200</pubDate>
        <link>http://rasmustc.com/blog/Code-Templates-In-Xamarin-Studio/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Code-Templates-In-Xamarin-Studio/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Howto Combine IOC And Xamarin DependencyService</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt;n Xamarin Forms we can use the built-in DependencyService, to use native features. In the terms of dependency injection this approach does work, but it&#39;s more of a service locator. If we at the same time use an IOC container like Autofac or just SimpleIoC, this DependencService becomes a bit messy as it by default breaks the constructor injection. Well luckily we can get the best of both by combining the two.  
&lt;/p&gt;

&lt;h3 id=&quot;xamarin-forms-dependencyservice&quot;&gt;Xamarin Forms DependencyService&lt;/h3&gt;
&lt;p&gt;In a basic Xamarin Forms application we can use the &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/dependency-service/&quot;&gt;DependencyService&lt;/a&gt; to resolve platform specific/native dependencies if we use a PCL approach. Let’s start by looking how this is done, by resolving a service to resize images implemented in iOS and Android.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*** PCL project ***/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reasonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_imageResizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImageGalleryViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ImageGalleryViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_imageResizer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DependencyService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IImageResizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*** iOS project ***/&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[assembly: Xamarin.Forms.Dependency (typeof(ImageResizer))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyApp.iOS.Services&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImageResizer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IImageResizer&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Resize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//....impl omitted
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*** Android project ***/&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[assembly: Xamarin.Forms.Dependency (typeof(ImageResizer))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyApp.Droid.Services&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImageResizer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IImageResizer&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Resize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//....impl omitted
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The important step to note here, is how we get the dependency into the ViewModel. In many MVVM implementations a very common approach is contructor injection. Tthis makes it easy to inject other implementations during testing and most of all it’s very clear to the consumer of the ViewModel, if it requires any dependencies. The use of the DependencyService in the code above, makes it more of a blackbox.&lt;/p&gt;

&lt;h3 id=&quot;open-the-box-and-inject&quot;&gt;Open the box and inject…&lt;/h3&gt;
&lt;p&gt;As Xamarin Forms DependencyService &lt;strong&gt;&lt;em&gt;is a great service&lt;/em&gt;&lt;/strong&gt;, a more common usage in MVVM implementations, is to use an IoC Container like &lt;a href=&quot;http://autofac.org/&quot;&gt;Autofac&lt;/a&gt; or SimpleIOC that’s baked into &lt;a href=&quot;http://www.mvvmlight.net/&quot;&gt;MVVMLight&lt;/a&gt;.
These containes makes it possible to do constructor injection, by register all needed dependencies upfront. As we have a ViewModel, we can assume it’s used together with a view as a BindingContext, so the first registration is to register the ViewModel in the container itself. To see how all this can be autowired, read my previous [post].(http://rasmustc.com/blog/Index-ViewModelLocator-With-MvvmLight-And-Xamarin-Forms/)&lt;/p&gt;

&lt;p&gt;First we register the ViewModel as it’s a dependency to a view.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModelLocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamicObject&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ViewModelLocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ServiceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetLocatorProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleIoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;SimpleIoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageGalleryViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next we change the signature of the &lt;strong&gt;ImageGalleryViewModel&lt;/strong&gt; to require &lt;strong&gt;IImageResizer&lt;/strong&gt; as a dependency.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ImageGalleryViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IImageResizer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageResizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As the IoC container is responsible of resolving dependencies, we need to ensure our viewmodel can be resolved with the new dependency from the container. Well it’s really simple.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModelLocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamicObject&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ViewModelLocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ServiceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetLocatorProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleIoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleIoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IImageResizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DependencyService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IImageResizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;di&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageGalleryViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All we need to do is move the &lt;strong&gt;DependencyService&lt;/strong&gt; into the container registration. As the code runs on a specific platform, iOS or Android, our ViewModel is resolved. The specific platform implementation of &lt;strong&gt;IImageResizer&lt;/strong&gt; will then be resolved as the dependency required by our ViewModel, and now we have a more clean implementation.&lt;/p&gt;

</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;I&lt;/span&gt;n Xamarin Forms we can use the built-in DependencyService, to use native features. In the terms of dependency injection this approach does work, but it&#39;s more of a service locator. If we at the same time use an IOC container like Autofac or just SimpleIoC, this DependencService becomes a bit messy as it by default breaks the constructor injection. Well luckily we can get the best of both by combining the two.  
&lt;/p&gt;

</description>
        
        <pubDate>Thu, 07 Apr 2016 00:00:00 +0200</pubDate>
        <link>http://rasmustc.com/blog/Combine-IOC-And-DependencyService/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Combine-IOC-And-DependencyService/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Indexed ViewModelLocator With MVVMLight And Xamarin Forms</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;orking with MVVMLight toolkit and Xamarin Forms removes a lot of boiler plate coding. When it comes to the basic of resolving viewmodels this clean code gets a bit blurry, so let&#39;s see how we can improve this.  
&lt;/p&gt;

&lt;h3 id=&quot;the-default-viewmodel-resolving&quot;&gt;The default Viewmodel resolving&lt;/h3&gt;
&lt;p&gt;Building a solution with MVVMLight, the most common solution to resolve viewmodels is a mix of SimpleIOC and a ViewModelLocator. The ViewModelLocator provides basic binding for each ViewModel it exposes and Views consume the ViewModels by databinding.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BasicMvvmLight.Views.CarListView&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;BindingContext=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding CarVM, Source={StaticResource ViewModelLocator}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage.Content&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Brand}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Label&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage.Content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModelLocator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ViewModelLocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ServiceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetLocatorProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleIoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;SimpleIoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CarViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;		
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Diagnostics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CodeAnalysis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SuppressMessage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Microsoft.Performance&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;CA1822:MarkMembersAsStatic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Justification&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This non-static member is needed for data binding purposes.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarViewModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CarVM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CarViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code above ensures that the BindingContext in the &lt;strong&gt;view&lt;/strong&gt; is set by the &lt;strong&gt;&lt;em&gt;CarVM&lt;/em&gt;&lt;/strong&gt; binding where CarVM is the name of the binding in the ViewModelLocator providing the CarViewModel. As the solution grows, the &lt;strong&gt;ViewModelLocator&lt;/strong&gt; becomes a class with a lot of basic getter’s just to resolve ViewModels, some pretty trivial code to write an maintain.&lt;/p&gt;

&lt;h3 id=&quot;indexed-databinding&quot;&gt;Indexed databinding&lt;/h3&gt;
&lt;p&gt;If we start by taking a look at the XAML code in the view, we currently have the &lt;strong&gt;Binding CarVM&lt;/strong&gt; as a &lt;strong&gt;&lt;em&gt;hard&lt;/em&gt;&lt;/strong&gt; databinding to a specific property on the &lt;strong&gt;ViewModelLocator&lt;/strong&gt;. Luckily we have the option to use an indexed binding, where we can specify a simple name as a string, we want to bind to and not a specific property. This means we can take advantage of a single index on the viewmodel to resolve viewmodels and less code to maintain! The flow is illustrated below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/viewmodellocatorflow.png&quot; alt=&quot;viewmodellocatorflow&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;refactor-view&quot;&gt;Refactor View&lt;/h3&gt;
&lt;p&gt;The first thing we need to do is change the binding in the view to make use of the &lt;strong&gt;indexer&lt;/strong&gt;. As you can see I’ve also changed the name of the index to &lt;strong&gt;CarViewModel&lt;/strong&gt;. this is because we want to use the binding index as type lookup in the ViewModelLocator later meaning the name should match a corresponding type.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BasicMvvmLight.Views.CarListView&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;BindingContext=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding [CarViewModel], Source={StaticResource ViewModelLocator}}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage.Content&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt;
			&lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Brand}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Label&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage.Content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;refactor-viewmodellocator&quot;&gt;Refactor ViewModelLocator&lt;/h3&gt;
&lt;p&gt;The refactor of our ViewModelLocator introduces some new concepts. As specified by the view, we should provide an &lt;strong&gt;indexer&lt;/strong&gt;. The indexer is added by letting the ViewModelLocator inherit from &lt;strong&gt;DynamicObject&lt;/strong&gt;. This makes &lt;strong&gt;TryGetMember&lt;/strong&gt; available, which the binding in the view will target. Combined with this, we add an indexer which use the final piece of the puzzle, the &lt;strong&gt;ViewModelResolver&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModelLocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DynamicObject&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModelResolver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ViewModelLocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ServiceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetLocatorProvider&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleIoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;SimpleIoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CarViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModelResolver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resolver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_resolver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_resolver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ViewModelResolver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;               
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Resolve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TryGetMember&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetMemberBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;introducing-viewmodelresolver&quot;&gt;Introducing ViewModelResolver&lt;/h3&gt;
&lt;p&gt;The responsibility of the &lt;strong&gt;ViewModelResolver&lt;/strong&gt; is to resolve an instance of a ViewModel, from a name specifying its type. One thing to keep in mind, the &lt;strong&gt;ViewModelResolver&lt;/strong&gt; is located inside a &lt;strong&gt;PCL&lt;/strong&gt;. This is necessary to know when we resolve the type from the assembly.
We find all the types defined and make a match on the provided name. When located, the instance is resolved and all dependencies it might might require (constructor based) will also be resolved, when using the DI Container.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewModelResolver&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;		
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ViewModelResolver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;       

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Resolve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmtype&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetTypeInfo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DefinedTypes&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AsType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceLocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetInstance&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmtype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the ViewModelResolver in place we can now run the project and if we extend the app with more view and viewmodels, we just need to ensure everything is registered in the DI container. If another DI container like Autofac is used instead, it can simply be injected into the ViewModelResolver.&lt;/p&gt;

&lt;p&gt;The complete source code is available here &lt;a href=&quot;https://github.com/rasmuschristensen/XamarinMvvmLightViewModelResolver&quot;&gt;GitHub Repository&lt;/a&gt;.&lt;/p&gt;

</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;W&lt;/span&gt;orking with MVVMLight toolkit and Xamarin Forms removes a lot of boiler plate coding. When it comes to the basic of resolving viewmodels this clean code gets a bit blurry, so let&#39;s see how we can improve this.  
&lt;/p&gt;

</description>
        
        <pubDate>Sun, 03 Apr 2016 00:00:00 +0200</pubDate>
        <link>http://rasmustc.com/blog/Index-ViewModelLocator-With-MvvmLight-And-Xamarin-Forms/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Index-ViewModelLocator-With-MvvmLight-And-Xamarin-Forms/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Image gallery with Xamarin Forms</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;O&lt;/span&gt;ut of the box Xamarin Forms provides many standard cross platform controls. Recently I had the need to display images in an image gallery and among the many controls Xamarin Forms provides, they aren&#39;t exactly image galleries. So my solution was to build a cross platform image gallery. 
&lt;/p&gt;

&lt;h3 id=&quot;the-concept-of-an-image-gallery&quot;&gt;The concept of an image gallery&lt;/h3&gt;
&lt;p&gt;We’ll create a reuseable control, capable of displaying images from an observablecollection. The control will support horizontal scrolling, and when a new photo is captured with the camera, it’s added to the gallery immediatly, using databinding. Further more we’ll take advantage of tap gestures and display a big version of an image, when it’s selected.&lt;/p&gt;

&lt;p&gt;The source code is available &lt;a href=&quot;https://github.com/rasmuschristensen/XamarinFormsImageGallery&quot;&gt;here&lt;/a&gt;
For a functional demo, watch the video at the bottom of this post or checkout the GitHub Repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/imagegalleryLayout.png&quot; alt=&quot;imageGalleryLayout&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;building-an-image-gallery&quot;&gt;Building an image gallery&lt;/h3&gt;
&lt;p&gt;The core of the image gallery is a standard &lt;strong&gt;StackLayout&lt;/strong&gt; with images inside. The gallery itself will expose an &lt;strong&gt;ItemsSource&lt;/strong&gt; property where we can databind an observable collection. Each time a photo is captured, the gallery will append the new photo. If we tap an image, it will be displayed in the preview area. Further more when the gallery becomes wider than the screen, horizontal scroll will be added. Time to checkout the code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ImageGallery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScrollView&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackLayout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_imageStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ImageGallery&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Orientation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScrollOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Horizontal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;_imageStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackLayout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Orientation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StackOrientation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Horizontal&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_imageStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_imageStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We start by creating a class which inherits from &lt;strong&gt;ScrollView&lt;/strong&gt; and set its orientation to &lt;strong&gt;Horizontal&lt;/strong&gt;. Inside the ScrollView we make a &lt;strong&gt;StackLayout&lt;/strong&gt; to contain all our &lt;strong&gt;Images&lt;/strong&gt;, even though we define it as &lt;strong&gt;View&lt;/strong&gt; in the code above. More on this later when we get to the &lt;strong&gt;ItemTemplate&lt;/strong&gt; support.&lt;/p&gt;

&lt;h3 id=&quot;itemssource-support&quot;&gt;ItemsSource support&lt;/h3&gt;
&lt;p&gt;We want to ensure that out image gallery supports databinding with MVVM and hence we want to expose a bindable property where the consumer of the control can attach a data bound collection. We do this by adding a BindableProperty &lt;strong&gt;ItemsSource&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindableProperty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemsSourceProperty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BindableProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageGallery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemsSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;BindingMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TwoWay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;propertyChanging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindableObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageGallery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindableObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ItemsSourceChanging&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;propertyChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindableObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageGallery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindableObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ItemsSourceChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindableObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemsSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemsSourceProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;SetValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemsSourceProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this property we get access to &lt;strong&gt;ItemsSourceChanged&lt;/strong&gt; and &lt;strong&gt;ItemsSourceChanging&lt;/strong&gt;. The latter is not in scope here. &lt;strong&gt;ItemsSourceChanged&lt;/strong&gt; provides access to values currently in the source and also &lt;strong&gt;&lt;em&gt;added&lt;/em&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;em&gt;removed&lt;/em&gt;&lt;/strong&gt; items. In this post we only focus on items being added to the source, but it’s fairly easy to extend with remove.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notifyCollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INotifyCollectionChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;notifyCollection&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;notifyCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CollectionChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newItem&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateContent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindableObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindableObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindableObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;bindableObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BindingContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_imageStack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We hook into  &lt;strong&gt;CollectionChanged&lt;/strong&gt; of our ItemsSource. For each new item added, we create an instance of the current &lt;strong&gt;ItemTemplate&lt;/strong&gt; defined in XAML. The &lt;strong&gt;View&lt;/strong&gt; we get from here, will be treated as a &lt;strong&gt;BindableObject&lt;/strong&gt; itself, and from this point of view &lt;strong&gt;&lt;em&gt;“untyped”&lt;/em&gt;&lt;/strong&gt;.  This means we can add almost any custom object to our collection and make the current defined &lt;strong&gt;ItemTemplate&lt;/strong&gt; responsible for rendering.&lt;/p&gt;

&lt;p&gt;As you can see from the source code, we can make usage of &lt;strong&gt;SelectedIndex&lt;/strong&gt; but I’ve decided to make use of &lt;strong&gt;GestureRecognizers&lt;/strong&gt; defined in the &lt;strong&gt;ItemTemplate&lt;/strong&gt; when selecting an image to preview.&lt;/p&gt;

&lt;h3 id=&quot;itemtemplate-for-render-and-gesture-support&quot;&gt;ItemTemplate for render and gesture support&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;ItemTemplate&lt;/strong&gt; we define when using our image gallery control is &lt;strong&gt;&lt;em&gt;just a standard&lt;/em&gt;&lt;/strong&gt; defined item template as you would also create if you use ListView etc.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageGallery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Source}&quot;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Aspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AspectFit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GestureRecognizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TapGestureRecognizer&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Path=BindingContext.PreviewImageCommand, Source={x:Reference ThePage}}&quot;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;CommandParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding ImageId}&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GestureRecognizers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ImageGallery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First we add an Image and bind it to the &lt;strong&gt;Source&lt;/strong&gt; property of the items in the image gallery &lt;strong&gt;ItemsSource&lt;/strong&gt; property, here implemented as an ImageSource. Next we define a &lt;strong&gt;TapGestureRecognizer&lt;/strong&gt;, this one is a bit more tricky. Because we only have a single view and a single viewmodel in this sample, we make a &lt;strong&gt;Binding&lt;/strong&gt; to a &lt;strong&gt;Command&lt;/strong&gt;(&lt;strong&gt;&lt;em&gt;PreviewImageCommand&lt;/em&gt;&lt;/strong&gt;) on the MainViewModel, bound to the &lt;strong&gt;MainView&lt;/strong&gt; aka the current &lt;strong&gt;BindingContext&lt;/strong&gt;. Along the command we’ve also defined a &lt;strong&gt;CommandParameter&lt;/strong&gt; which is a unique id of each image. This is used by the PreviewImageCommand, so select the image to preview.&lt;/p&gt;

&lt;p&gt;With all this in place, all we need is a basic ViewModel with an ObservableCollection of images and a command to handle the preview gesture. You can find this in the &lt;a href=&quot;https://github.com/rasmuschristensen/XamarinFormsImageGallery&quot;&gt;GitHub Repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The final app will work like the video below, for both IOS and Android. 
&lt;img src=&quot;/assets/img/imagegallery.gif&quot; alt=&quot;appvideo&quot; /&gt; 
&lt;img src=&quot;/assets/img/androidimagegallery.png&quot; alt=&quot;appimage&quot; /&gt;&lt;/p&gt;

</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;O&lt;/span&gt;ut of the box Xamarin Forms provides many standard cross platform controls. Recently I had the need to display images in an image gallery and among the many controls Xamarin Forms provides, they aren&#39;t exactly image galleries. So my solution was to build a cross platform image gallery. 
&lt;/p&gt;

</description>
        
        <pubDate>Mon, 21 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Image-Gallery-With-Xamarin-Forms/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Image-Gallery-With-Xamarin-Forms/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>Infinite ListView scrolling with behaviors and XAML</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;S&lt;/span&gt;crolling a ListView with behaviors makes your code clean and reuseable.
&lt;/p&gt;

&lt;p&gt;By default Xamarin Forms support scrolling and making infinite scrolling by using events. If you like me are developing with the MVVM mindset, 
events can become a bit messy when everything else is handled by comamnds. Let’s take advantage of &lt;strong&gt;Behaviors&lt;/strong&gt; and see how we can turn events into a command driven code style.&lt;/p&gt;

&lt;h3 id=&quot;the-beer-order-app&quot;&gt;The beer order app&lt;/h3&gt;
&lt;p&gt;We’ll create an app to list beer orders. All orders will have a created date, and this is the key to our listing. We’ll make the app display
the orders in decending order by the created date with the newest on top. As a best practics data should always be loaded in batches to reduce newwork traffic and load. The app will load 20 items per page, meaning when we scroll to the bottom, we will load the next 20 orders by the created date. 
The app will load data from an inapp store, but can easily be replaced with your own external storage.&lt;/p&gt;

&lt;p&gt;The source code is available &lt;a href=&quot;https://github.com/rasmuschristensen/SimpleListViewInfiniteScrolling&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final app will work like the video below, in a mix of refresh and scrolling. The page title indicates the number of items currently loaded. 
&lt;img src=&quot;/assets/img/infinitebrew.gif&quot; alt=&quot;appvideo&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;from-event-to-behavior&quot;&gt;From event to behavior&lt;/h3&gt;
&lt;p&gt;The ListView exposes the event &lt;strong&gt;ItemAppearing&lt;/strong&gt; each time an item in the ListView becomes visible. What we need to do is check whether the item is the last visible item in the ListView. In our app we have no unique identifier to page from, instead we want to page by the date of the orders.&lt;/p&gt;

&lt;p&gt;First we create a class &lt;strong&gt;ListViewPagningBehavior&lt;/strong&gt; which inherits the generic Behavior with the type of our ListView as the type, __Behavior&lt;listview&gt;__. We will override the methods __OnAttachedTo__ and __OnDetachingFrom__ as the entry point to subscribe and unsubscribe the events we&#39;ll listen to.&lt;/listview&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnAttachedTo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;			
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnAttachedTo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;AssociatedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BindingContextChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBindingContextChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemAppearing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnItemAppearing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnDetachingFrom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnDetachingFrom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BindingContextChanged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnBindingContextChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bindable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ItemAppearing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OnItemAppearing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AssociatedObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Besides the &lt;strong&gt;OnItemAppearing&lt;/strong&gt; event, we also listen to the change of binding context.&lt;/p&gt;

&lt;h3 id=&quot;time-to-do-paging&quot;&gt;Time to do paging&lt;/h3&gt;
&lt;p&gt;Each time a new item appears in the ListView, the following method will be executed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnItemAppearing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemVisibilityEventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;		
    &lt;span class=&quot;c1&quot;&gt;// sanity checks hidden - see the github repository
&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Converter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Convert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CanExecute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;       
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note the &lt;strong&gt;Command&lt;/strong&gt; introduced here. It’s defined and exposed by our behavior. This way when we can use the behavior from a XAML view and bind to the &lt;strong&gt;ICommand&lt;/strong&gt;, we want to handle the specific action. The comamnd is exposed from the behavior this way.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindableProperty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CommandProperty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindableProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListViewPagningBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ICommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SetValue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommandProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;type-conversion&quot;&gt;Type conversion&lt;/h3&gt;
&lt;p&gt;As the command is type specific and our behavior is not, we need to add a &lt;strong&gt;value converter&lt;/strong&gt; to handle the conversion. It’s exposed from the behavior the same way as the command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindableProperty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputConverterProperty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BindableProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Converter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IValueConverter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListViewPagningBehavior&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The converter itself is pretty straight forward and for this purpose we don’t need to implement &lt;strong&gt;ConvertBack&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemVisibilityEventArgstemConverter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IValueConverter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Convert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CultureInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;culture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ItemVisibilityEventArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;xaml-glue&quot;&gt;XAML glue&lt;/h3&gt;
&lt;p&gt;With the behavior in place, it’s time to wire it all up in XAML. 
I’ve defined some local namespaces to seperate the components, and added the converter as a StaticResource.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/xamlbehavior.png&quot; alt=&quot;xamlbehavior&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The source code is available &lt;a href=&quot;https://github.com/rasmuschristensen/SimpleListViewInfiniteScrolling&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/infinitebrew.gif&quot; alt=&quot;appvideo&quot; /&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;S&lt;/span&gt;crolling a ListView with behaviors makes your code clean and reuseable.
&lt;/p&gt;

</description>
        
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/Infinite-ListView-Scrolling-With-Behaviors/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/Infinite-ListView-Scrolling-With-Behaviors/</guid>
        
        
      </item>
      
    
      
      <item>
        <title>CI With VSTS And Bitbucket</title>
        <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;H&lt;/span&gt;ow to make Continuous Integration with Bitbucket and VSTS, when Bitbucket is not a default service inside VSTS. 
&lt;/p&gt;

&lt;p&gt;In the previous blog &lt;a href=&quot;http://rasmustc.com/blog/Continuous-Integration-With-VSTS-And-Xamarin/&quot;&gt;post&lt;/a&gt; I described how to make a basic CI setup with VSTS using a repository hosted in VSTS.
Bitbucket is a very popular source code repository, unfortunately not a default choice in VSTS, like GitHub etc. In this post I’ll show the steps required
to make Bitbucket work as repository. This post will use some of the concepts described in my previous blog post.
The build will also run on a local build agent, VSO agent.&lt;/p&gt;

&lt;h3 id=&quot;making-a-repository&quot;&gt;Making a repository&lt;/h3&gt;
&lt;p&gt;The first step is to make a repository at Bitbucket and make an initial commit. When the commit is made, copy the &lt;strong&gt;https&lt;/strong&gt; url of the repository.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rasmuschristensen@bitbucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rasmuschristensen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nearby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;vsts-bitbucket-service-endpoint&quot;&gt;VSTS Bitbucket Service endpoint&lt;/h3&gt;
&lt;p&gt;Because there is no default hook in VSTS to support Bitbucket, we need to create it as &lt;strong&gt;external git&lt;/strong&gt;.
Navigate to the collection settings for your project, by selecting the ‘gears’ icon in the upper right corner of your project.
Select the &lt;strong&gt;Services&lt;/strong&gt; tab and click the &lt;strong&gt;New Service Endpoint&lt;/strong&gt;. From the menu select &lt;strong&gt;External Git&lt;/strong&gt;.
A dialog is displayed. Add a &lt;strong&gt;Connection name&lt;/strong&gt;, this is just your identification of the service endpoint.
The &lt;strong&gt;Server Url&lt;/strong&gt; is the fully qualified url we copied from the Bitbucket homepage. As we used &lt;strong&gt;https&lt;/strong&gt; username and password is the ones you use 
for regular https usage of the repository.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bitbucketserviceendpoint.png&quot; alt=&quot;serviceendpoint&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;vsts-permissions&quot;&gt;VSTS permissions&lt;/h3&gt;
&lt;p&gt;VSTS build needs some permissions to use this external git, during a build process.
Navigate to the &lt;strong&gt;Default collection&lt;/strong&gt; a level above your corrent project and select the &lt;strong&gt;Security&lt;/strong&gt; tab. Locate &lt;strong&gt;Project Collection Build Administrators&lt;/strong&gt; and ensure &lt;strong&gt;Edit Collection-level information&lt;/strong&gt; is set to &lt;strong&gt;Allow&lt;/strong&gt;.
If not you’ll get an error during the build process.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildpermissions.png&quot; alt=&quot;buildpermissions&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;adding-a-build-definition&quot;&gt;Adding a build definition&lt;/h3&gt;
&lt;p&gt;Navigate to your VSTS project again and select the &lt;strong&gt;Build&lt;/strong&gt; tab. Click the &lt;strong&gt;+&lt;/strong&gt; to create a new build definition.
I’m using the Xamarin.iOS. From the template select &lt;strong&gt;Remote git repository&lt;/strong&gt; (note the name difference :)).
Once created, you can now edit the details.&lt;/p&gt;

&lt;p&gt;From the &lt;strong&gt;Build&lt;/strong&gt; menu item of the build definition, add the relative path to the solution, sln file.
&lt;em&gt;(hint: If you get this one wrong, you can use the build console output, to see the fully qualified path, and easy correct it afterwards)&lt;/em&gt;.
Next you need to select the &lt;strong&gt;Repository&lt;/strong&gt; menu item. The &lt;strong&gt;Repository type&lt;/strong&gt; should already be set to &lt;strong&gt;external git&lt;/strong&gt; (not remote :)). Refresh the &lt;strong&gt;Connection&lt;/strong&gt; and select
the Bitbucket service endpoint we created earlier, leave the &lt;strong&gt;Repository name&lt;/strong&gt; blank. The service endpoint is already fully qualified. Save the build definition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/bitbucketgit.png&quot; alt=&quot;bitbucketgit&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;update-vso-agent&quot;&gt;Update VSO-agent&lt;/h3&gt;
&lt;p&gt;Ensure to update your VSO build agent. I used a previous version and had issues with username and password for the external git, not being passed along to the 
build agent, causing the build to fail (see this &lt;a href=&quot;https://github.com/Microsoft/vso-agent/issues/183&quot;&gt;issue&lt;/a&gt;). Updating an existing agent is the same as installing a new one. Navigate to the agents directory where the package.json is located and 
execute the following command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;skSL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;://&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aka&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xplatagent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bash&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;lets-build&quot;&gt;Let’s build!&lt;/h3&gt;
&lt;p&gt;When all steps are completed, ensure the VSO agent is running and queue a new build. (&lt;em&gt;Note, if you are build a Xamarin project, you need a business license.&lt;/em&gt;)
When the build starts, a console is displayed inside the browser where you can follow all steps along the build process. If the sln path is incorrect, this is also where you can see the current resolved path.&lt;/p&gt;

&lt;p&gt;After a couple of permission errors as described above and incorrect sln path, the result should be this, a green build&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/buildsucceeded.png&quot; alt=&quot;build succeeded&quot; /&gt;&lt;/p&gt;
</description>
        
          <description>&lt;p class=&quot;intro&quot;&gt;
&lt;span class=&quot;dropcap&quot;&gt;H&lt;/span&gt;ow to make Continuous Integration with Bitbucket and VSTS, when Bitbucket is not a default service inside VSTS. 
&lt;/p&gt;

</description>
        
        <pubDate>Fri, 26 Feb 2016 00:00:00 +0100</pubDate>
        <link>http://rasmustc.com/blog/CI-VSTS-Bitbucket-And-Xamarin/</link>
        <guid isPermaLink="true">http://rasmustc.com/blog/CI-VSTS-Bitbucket-And-Xamarin/</guid>
        
        
      </item>
      
    
  </channel>
</rss>
